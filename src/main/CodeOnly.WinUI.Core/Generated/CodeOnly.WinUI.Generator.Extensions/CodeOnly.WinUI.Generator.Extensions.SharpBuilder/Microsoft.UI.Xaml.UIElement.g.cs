//
// <auto-generated> CodeOnly.WinUI.Core.Generator.Extensions
//

#nullable enable
#pragma warning disable CS8601

using System;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using System.Collections.Generic;


namespace CodeOnly.WinUI.Core
{
    using CodeOnly.WinUI.Core.Internal;
    
    public static partial class UIElementExtension
    {
        public static T AccessKey<T>(this T self,
            string accessKey)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.AccessKeyProperty, accessKey);
            return self;
        }
        
        public static T AccessKey<T>(this T self, Func<PropertyContext<string>, IPropertyBuilder<string>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<string>(self, Microsoft.UI.Xaml.UIElement.AccessKeyProperty);
            configure(context).Build();
            return self;
        }
        
        public static T AccessKeyScopeOwner<T>(this T self,
            Microsoft.UI.Xaml.DependencyObject accessKeyScopeOwner)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.AccessKeyScopeOwnerProperty, accessKeyScopeOwner);
            return self;
        }
        
        public static T AccessKeyScopeOwner<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.DependencyObject>, IPropertyBuilder<Microsoft.UI.Xaml.DependencyObject>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.DependencyObject>(self, Microsoft.UI.Xaml.UIElement.AccessKeyScopeOwnerProperty);
            configure(context).Build();
            return self;
        }
        
        public static T AllowDrop<T>(this T self,
            bool allowDrop)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.AllowDropProperty, allowDrop);
            return self;
        }
        
        public static T AllowDrop<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.UIElement.AllowDropProperty);
            configure(context).Build();
            return self;
        }
        
        public static T CacheMode<T>(this T self,
            Microsoft.UI.Xaml.Media.CacheMode cacheMode)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.CacheModeProperty, cacheMode);
            return self;
        }
        
        public static T CacheMode<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.CacheMode>, IPropertyBuilder<Microsoft.UI.Xaml.Media.CacheMode>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.CacheMode>(self, Microsoft.UI.Xaml.UIElement.CacheModeProperty);
            configure(context).Build();
            return self;
        }
        
        public static T CanBeScrollAnchor<T>(this T self,
            bool canBeScrollAnchor)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.CanBeScrollAnchorProperty, canBeScrollAnchor);
            return self;
        }
        
        public static T CanBeScrollAnchor<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.UIElement.CanBeScrollAnchorProperty);
            configure(context).Build();
            return self;
        }
        
        public static T CanDrag<T>(this T self,
            bool canDrag)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.CanDragProperty, canDrag);
            return self;
        }
        
        public static T CanDrag<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.UIElement.CanDragProperty);
            configure(context).Build();
            return self;
        }
        
        public static T CenterPoint<T>(this T self,
            System.Numerics.Vector3 centerPoint)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.CenterPoint = centerPoint;
            return self;
        }
        
        public static T Clip<T>(this T self,
            Microsoft.UI.Xaml.Media.RectangleGeometry clip)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.ClipProperty, clip);
            return self;
        }
        
        public static T Clip<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.RectangleGeometry>, IPropertyBuilder<Microsoft.UI.Xaml.Media.RectangleGeometry>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.RectangleGeometry>(self, Microsoft.UI.Xaml.UIElement.ClipProperty);
            configure(context).Build();
            return self;
        }
        
        public static T CompositeMode<T>(this T self,
            Microsoft.UI.Xaml.Media.ElementCompositeMode compositeMode)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.CompositeModeProperty, compositeMode);
            return self;
        }
        
        public static T CompositeMode<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.ElementCompositeMode>, IPropertyBuilder<Microsoft.UI.Xaml.Media.ElementCompositeMode>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.ElementCompositeMode>(self, Microsoft.UI.Xaml.UIElement.CompositeModeProperty);
            configure(context).Build();
            return self;
        }
        
        public static T ContextFlyout<T>(this T self,
            Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase contextFlyout)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.ContextFlyoutProperty, contextFlyout);
            return self;
        }
        
        public static T ContextFlyout<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>, IPropertyBuilder<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>(self, Microsoft.UI.Xaml.UIElement.ContextFlyoutProperty);
            configure(context).Build();
            return self;
        }
        
        public static T ExitDisplayModeOnAccessKeyInvoked<T>(this T self,
            bool exitDisplayModeOnAccessKeyInvoked)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.ExitDisplayModeOnAccessKeyInvokedProperty, exitDisplayModeOnAccessKeyInvoked);
            return self;
        }
        
        public static T ExitDisplayModeOnAccessKeyInvoked<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.UIElement.ExitDisplayModeOnAccessKeyInvokedProperty);
            configure(context).Build();
            return self;
        }
        
        public static T HighContrastAdjustment<T>(this T self,
            Microsoft.UI.Xaml.ElementHighContrastAdjustment highContrastAdjustment)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.HighContrastAdjustmentProperty, highContrastAdjustment);
            return self;
        }
        
        public static T HighContrastAdjustment<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.ElementHighContrastAdjustment>, IPropertyBuilder<Microsoft.UI.Xaml.ElementHighContrastAdjustment>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.ElementHighContrastAdjustment>(self, Microsoft.UI.Xaml.UIElement.HighContrastAdjustmentProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsAccessKeyScope<T>(this T self,
            bool isAccessKeyScope)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.IsAccessKeyScopeProperty, isAccessKeyScope);
            return self;
        }
        
        public static T IsAccessKeyScope<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.UIElement.IsAccessKeyScopeProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsDoubleTapEnabled<T>(this T self,
            bool isDoubleTapEnabled)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.IsDoubleTapEnabledProperty, isDoubleTapEnabled);
            return self;
        }
        
        public static T IsDoubleTapEnabled<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.UIElement.IsDoubleTapEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsHitTestVisible<T>(this T self,
            bool isHitTestVisible)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.IsHitTestVisibleProperty, isHitTestVisible);
            return self;
        }
        
        public static T IsHitTestVisible<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.UIElement.IsHitTestVisibleProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsHoldingEnabled<T>(this T self,
            bool isHoldingEnabled)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.IsHoldingEnabledProperty, isHoldingEnabled);
            return self;
        }
        
        public static T IsHoldingEnabled<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.UIElement.IsHoldingEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsRightTapEnabled<T>(this T self,
            bool isRightTapEnabled)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.IsRightTapEnabledProperty, isRightTapEnabled);
            return self;
        }
        
        public static T IsRightTapEnabled<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.UIElement.IsRightTapEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsTabStop<T>(this T self,
            bool isTabStop)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.IsTabStopProperty, isTabStop);
            return self;
        }
        
        public static T IsTabStop<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.UIElement.IsTabStopProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsTapEnabled<T>(this T self,
            bool isTapEnabled)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.IsTapEnabledProperty, isTapEnabled);
            return self;
        }
        
        public static T IsTapEnabled<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.UIElement.IsTapEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static T KeyTipHorizontalOffset<T>(this T self,
            double keyTipHorizontalOffset)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.KeyTipHorizontalOffsetProperty, keyTipHorizontalOffset);
            return self;
        }
        
        public static T KeyTipHorizontalOffset<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<double>(self, Microsoft.UI.Xaml.UIElement.KeyTipHorizontalOffsetProperty);
            configure(context).Build();
            return self;
        }
        
        public static T KeyTipPlacementMode<T>(this T self,
            Microsoft.UI.Xaml.Input.KeyTipPlacementMode keyTipPlacementMode)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.KeyTipPlacementModeProperty, keyTipPlacementMode);
            return self;
        }
        
        public static T KeyTipPlacementMode<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Input.KeyTipPlacementMode>, IPropertyBuilder<Microsoft.UI.Xaml.Input.KeyTipPlacementMode>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Input.KeyTipPlacementMode>(self, Microsoft.UI.Xaml.UIElement.KeyTipPlacementModeProperty);
            configure(context).Build();
            return self;
        }
        
        public static T KeyTipTarget<T>(this T self,
            Microsoft.UI.Xaml.DependencyObject keyTipTarget)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.KeyTipTargetProperty, keyTipTarget);
            return self;
        }
        
        public static T KeyTipTarget<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.DependencyObject>, IPropertyBuilder<Microsoft.UI.Xaml.DependencyObject>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.DependencyObject>(self, Microsoft.UI.Xaml.UIElement.KeyTipTargetProperty);
            configure(context).Build();
            return self;
        }
        
        public static T KeyTipVerticalOffset<T>(this T self,
            double keyTipVerticalOffset)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.KeyTipVerticalOffsetProperty, keyTipVerticalOffset);
            return self;
        }
        
        public static T KeyTipVerticalOffset<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<double>(self, Microsoft.UI.Xaml.UIElement.KeyTipVerticalOffsetProperty);
            configure(context).Build();
            return self;
        }
        
        public static T KeyboardAcceleratorPlacementMode<T>(this T self,
            Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode keyboardAcceleratorPlacementMode)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.KeyboardAcceleratorPlacementModeProperty, keyboardAcceleratorPlacementMode);
            return self;
        }
        
        public static T KeyboardAcceleratorPlacementMode<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode>, IPropertyBuilder<Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Input.KeyboardAcceleratorPlacementMode>(self, Microsoft.UI.Xaml.UIElement.KeyboardAcceleratorPlacementModeProperty);
            configure(context).Build();
            return self;
        }
        
        public static T KeyboardAcceleratorPlacementTarget<T>(this T self,
            Microsoft.UI.Xaml.DependencyObject keyboardAcceleratorPlacementTarget)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.KeyboardAcceleratorPlacementTargetProperty, keyboardAcceleratorPlacementTarget);
            return self;
        }
        
        public static T KeyboardAcceleratorPlacementTarget<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.DependencyObject>, IPropertyBuilder<Microsoft.UI.Xaml.DependencyObject>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.DependencyObject>(self, Microsoft.UI.Xaml.UIElement.KeyboardAcceleratorPlacementTargetProperty);
            configure(context).Build();
            return self;
        }
        
        public static T KeyboardAccelerators<T>(this T self,
            IList<Microsoft.UI.Xaml.Input.KeyboardAccelerator> keyboardAccelerators)
            where T : Microsoft.UI.Xaml.UIElement
        {
            foreach (var item in keyboardAccelerators)
                self.KeyboardAccelerators.Add(item);
            return self;
        }

        public static T KeyboardAccelerators<T>(this T self,
            params Microsoft.UI.Xaml.Input.KeyboardAccelerator[] keyboardAccelerators)
            where T : Microsoft.UI.Xaml.UIElement
        {
            foreach (var item in keyboardAccelerators)
                self.KeyboardAccelerators.Add(item);
            return self;
        }
        
        public static T Lights<T>(this T self,
            IList<Microsoft.UI.Xaml.Media.XamlLight> lights)
            where T : Microsoft.UI.Xaml.UIElement
        {
            foreach (var item in lights)
                self.Lights.Add(item);
            return self;
        }

        public static T Lights<T>(this T self,
            params Microsoft.UI.Xaml.Media.XamlLight[] lights)
            where T : Microsoft.UI.Xaml.UIElement
        {
            foreach (var item in lights)
                self.Lights.Add(item);
            return self;
        }
        
        public static T Lights<T>(this T self, Func<PropertyContext<System.Collections.Generic.IList<Microsoft.UI.Xaml.Media.XamlLight>>, IPropertyBuilder<System.Collections.Generic.IList<Microsoft.UI.Xaml.Media.XamlLight>>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<System.Collections.Generic.IList<Microsoft.UI.Xaml.Media.XamlLight>>(self, Microsoft.UI.Xaml.UIElement.LightsProperty);
            configure(context).Build();
            return self;
        }
        
        public static T ManipulationMode<T>(this T self,
            Microsoft.UI.Xaml.Input.ManipulationModes manipulationMode)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.ManipulationModeProperty, manipulationMode);
            return self;
        }
        
        public static T ManipulationMode<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Input.ManipulationModes>, IPropertyBuilder<Microsoft.UI.Xaml.Input.ManipulationModes>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Input.ManipulationModes>(self, Microsoft.UI.Xaml.UIElement.ManipulationModeProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Opacity<T>(this T self,
            double opacity)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.OpacityProperty, opacity);
            return self;
        }
        
        public static T Opacity<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<double>(self, Microsoft.UI.Xaml.UIElement.OpacityProperty);
            configure(context).Build();
            return self;
        }
        
        public static T OpacityTransition<T>(this T self,
            Microsoft.UI.Xaml.ScalarTransition opacityTransition)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.OpacityTransition = opacityTransition;
            return self;
        }
        
        public static T Projection<T>(this T self,
            Microsoft.UI.Xaml.Media.Projection projection)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.ProjectionProperty, projection);
            return self;
        }
        
        public static T Projection<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.Projection>, IPropertyBuilder<Microsoft.UI.Xaml.Media.Projection>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.Projection>(self, Microsoft.UI.Xaml.UIElement.ProjectionProperty);
            configure(context).Build();
            return self;
        }
        
        public static T RasterizationScale<T>(this T self,
            double rasterizationScale)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.RasterizationScale = rasterizationScale;
            return self;
        }
        
        public static T RenderTransform<T>(this T self,
            Microsoft.UI.Xaml.Media.Transform renderTransform)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.RenderTransformProperty, renderTransform);
            return self;
        }
        
        public static T RenderTransform<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.Transform>, IPropertyBuilder<Microsoft.UI.Xaml.Media.Transform>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.Transform>(self, Microsoft.UI.Xaml.UIElement.RenderTransformProperty);
            configure(context).Build();
            return self;
        }
        
        public static T RenderTransformOrigin<T>(this T self,
            Windows.Foundation.Point renderTransformOrigin)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.RenderTransformOriginProperty, renderTransformOrigin);
            return self;
        }
        
        public static T RenderTransformOrigin<T>(this T self, Func<PropertyContext<Windows.Foundation.Point>, IPropertyBuilder<Windows.Foundation.Point>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Windows.Foundation.Point>(self, Microsoft.UI.Xaml.UIElement.RenderTransformOriginProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Rotation<T>(this T self,
            float rotation)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.Rotation = rotation;
            return self;
        }
        
        public static T RotationAxis<T>(this T self,
            System.Numerics.Vector3 rotationAxis)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.RotationAxis = rotationAxis;
            return self;
        }
        
        public static T RotationTransition<T>(this T self,
            Microsoft.UI.Xaml.ScalarTransition rotationTransition)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.RotationTransition = rotationTransition;
            return self;
        }
        
        public static T Scale<T>(this T self,
            System.Numerics.Vector3 scale)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.Scale = scale;
            return self;
        }
        
        public static T ScaleTransition<T>(this T self,
            Microsoft.UI.Xaml.Vector3Transition scaleTransition)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.ScaleTransition = scaleTransition;
            return self;
        }
        
        public static T Shadow<T>(this T self,
            Microsoft.UI.Xaml.Media.Shadow shadow)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.ShadowProperty, shadow);
            return self;
        }
        
        public static T Shadow<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.Shadow>, IPropertyBuilder<Microsoft.UI.Xaml.Media.Shadow>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.Shadow>(self, Microsoft.UI.Xaml.UIElement.ShadowProperty);
            configure(context).Build();
            return self;
        }
        
        public static T TabFocusNavigation<T>(this T self,
            Microsoft.UI.Xaml.Input.KeyboardNavigationMode tabFocusNavigation)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.TabFocusNavigationProperty, tabFocusNavigation);
            return self;
        }
        
        public static T TabFocusNavigation<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Input.KeyboardNavigationMode>, IPropertyBuilder<Microsoft.UI.Xaml.Input.KeyboardNavigationMode>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Input.KeyboardNavigationMode>(self, Microsoft.UI.Xaml.UIElement.TabFocusNavigationProperty);
            configure(context).Build();
            return self;
        }
        
        public static T TabIndex<T>(this T self,
            int tabIndex)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.TabIndexProperty, tabIndex);
            return self;
        }
        
        public static T TabIndex<T>(this T self, Func<PropertyContext<int>, IPropertyBuilder<int>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<int>(self, Microsoft.UI.Xaml.UIElement.TabIndexProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Transform3D<T>(this T self,
            Microsoft.UI.Xaml.Media.Media3D.Transform3D transform3D)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.Transform3DProperty, transform3D);
            return self;
        }
        
        public static T Transform3D<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.Media3D.Transform3D>, IPropertyBuilder<Microsoft.UI.Xaml.Media.Media3D.Transform3D>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.Media3D.Transform3D>(self, Microsoft.UI.Xaml.UIElement.Transform3DProperty);
            configure(context).Build();
            return self;
        }
        
        public static T TransformMatrix<T>(this T self,
            System.Numerics.Matrix4x4 transformMatrix)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.TransformMatrix = transformMatrix;
            return self;
        }
        
        public static T Transitions<T>(this T self,
            IList<Microsoft.UI.Xaml.Media.Animation.Transition> transitions)
            where T : Microsoft.UI.Xaml.UIElement
        {
            foreach (var item in transitions)
                self.Transitions.Add(item);
            return self;
        }

        public static T Transitions<T>(this T self,
            params Microsoft.UI.Xaml.Media.Animation.Transition[] transitions)
            where T : Microsoft.UI.Xaml.UIElement
        {
            foreach (var item in transitions)
                self.Transitions.Add(item);
            return self;
        }
        
        public static T Transitions<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.Animation.TransitionCollection>, IPropertyBuilder<Microsoft.UI.Xaml.Media.Animation.TransitionCollection>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.Animation.TransitionCollection>(self, Microsoft.UI.Xaml.UIElement.TransitionsProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Translation<T>(this T self,
            System.Numerics.Vector3 translation)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.Translation = translation;
            return self;
        }
        
        public static T TranslationTransition<T>(this T self,
            Microsoft.UI.Xaml.Vector3Transition translationTransition)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.TranslationTransition = translationTransition;
            return self;
        }
        
        public static T UseLayoutRounding<T>(this T self,
            bool useLayoutRounding)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.UseLayoutRoundingProperty, useLayoutRounding);
            return self;
        }
        
        public static T UseLayoutRounding<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.UIElement.UseLayoutRoundingProperty);
            configure(context).Build();
            return self;
        }
        
        public static T UseSystemFocusVisuals<T>(this T self,
            bool useSystemFocusVisuals)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.UseSystemFocusVisualsProperty, useSystemFocusVisuals);
            return self;
        }
        
        public static T UseSystemFocusVisuals<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.UIElement.UseSystemFocusVisualsProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Visibility<T>(this T self,
            Microsoft.UI.Xaml.Visibility visibility)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.VisibilityProperty, visibility);
            return self;
        }
        
        public static T Visibility<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Visibility>, IPropertyBuilder<Microsoft.UI.Xaml.Visibility>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Visibility>(self, Microsoft.UI.Xaml.UIElement.VisibilityProperty);
            configure(context).Build();
            return self;
        }
        
        public static T XYFocusDown<T>(this T self,
            Microsoft.UI.Xaml.DependencyObject xYFocusDown)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.XYFocusDownProperty, xYFocusDown);
            return self;
        }
        
        public static T XYFocusDown<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.DependencyObject>, IPropertyBuilder<Microsoft.UI.Xaml.DependencyObject>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.DependencyObject>(self, Microsoft.UI.Xaml.UIElement.XYFocusDownProperty);
            configure(context).Build();
            return self;
        }
        
        public static T XYFocusDownNavigationStrategy<T>(this T self,
            Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy xYFocusDownNavigationStrategy)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.XYFocusDownNavigationStrategyProperty, xYFocusDownNavigationStrategy);
            return self;
        }
        
        public static T XYFocusDownNavigationStrategy<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy>, IPropertyBuilder<Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy>(self, Microsoft.UI.Xaml.UIElement.XYFocusDownNavigationStrategyProperty);
            configure(context).Build();
            return self;
        }
        
        public static T XYFocusKeyboardNavigation<T>(this T self,
            Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode xYFocusKeyboardNavigation)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.XYFocusKeyboardNavigationProperty, xYFocusKeyboardNavigation);
            return self;
        }
        
        public static T XYFocusKeyboardNavigation<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode>, IPropertyBuilder<Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Input.XYFocusKeyboardNavigationMode>(self, Microsoft.UI.Xaml.UIElement.XYFocusKeyboardNavigationProperty);
            configure(context).Build();
            return self;
        }
        
        public static T XYFocusLeft<T>(this T self,
            Microsoft.UI.Xaml.DependencyObject xYFocusLeft)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.XYFocusLeftProperty, xYFocusLeft);
            return self;
        }
        
        public static T XYFocusLeft<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.DependencyObject>, IPropertyBuilder<Microsoft.UI.Xaml.DependencyObject>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.DependencyObject>(self, Microsoft.UI.Xaml.UIElement.XYFocusLeftProperty);
            configure(context).Build();
            return self;
        }
        
        public static T XYFocusLeftNavigationStrategy<T>(this T self,
            Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy xYFocusLeftNavigationStrategy)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.XYFocusLeftNavigationStrategyProperty, xYFocusLeftNavigationStrategy);
            return self;
        }
        
        public static T XYFocusLeftNavigationStrategy<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy>, IPropertyBuilder<Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy>(self, Microsoft.UI.Xaml.UIElement.XYFocusLeftNavigationStrategyProperty);
            configure(context).Build();
            return self;
        }
        
        public static T XYFocusRight<T>(this T self,
            Microsoft.UI.Xaml.DependencyObject xYFocusRight)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.XYFocusRightProperty, xYFocusRight);
            return self;
        }
        
        public static T XYFocusRight<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.DependencyObject>, IPropertyBuilder<Microsoft.UI.Xaml.DependencyObject>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.DependencyObject>(self, Microsoft.UI.Xaml.UIElement.XYFocusRightProperty);
            configure(context).Build();
            return self;
        }
        
        public static T XYFocusRightNavigationStrategy<T>(this T self,
            Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy xYFocusRightNavigationStrategy)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.XYFocusRightNavigationStrategyProperty, xYFocusRightNavigationStrategy);
            return self;
        }
        
        public static T XYFocusRightNavigationStrategy<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy>, IPropertyBuilder<Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy>(self, Microsoft.UI.Xaml.UIElement.XYFocusRightNavigationStrategyProperty);
            configure(context).Build();
            return self;
        }
        
        public static T XYFocusUp<T>(this T self,
            Microsoft.UI.Xaml.DependencyObject xYFocusUp)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.XYFocusUpProperty, xYFocusUp);
            return self;
        }
        
        public static T XYFocusUp<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.DependencyObject>, IPropertyBuilder<Microsoft.UI.Xaml.DependencyObject>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.DependencyObject>(self, Microsoft.UI.Xaml.UIElement.XYFocusUpProperty);
            configure(context).Build();
            return self;
        }
        
        public static T XYFocusUpNavigationStrategy<T>(this T self,
            Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy xYFocusUpNavigationStrategy)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.UIElement.XYFocusUpNavigationStrategyProperty, xYFocusUpNavigationStrategy);
            return self;
        }
        
        public static T XYFocusUpNavigationStrategy<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy>, IPropertyBuilder<Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy>> configure)
            where T : Microsoft.UI.Xaml.UIElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Input.XYFocusNavigationStrategy>(self, Microsoft.UI.Xaml.UIElement.XYFocusUpNavigationStrategyProperty);
            configure(context).Build();
            return self;
        }
        
        public static T XamlRoot<T>(this T self,
            Microsoft.UI.Xaml.XamlRoot xamlRoot)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.XamlRoot = xamlRoot;
            return self;
        }
        
        public static T OnAccessKeyDisplayDismissed<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.AccessKeyDisplayDismissedEventArgs> handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.AccessKeyDisplayDismissed += handler;
            return self;
        }
        
        public static T OnAccessKeyDisplayDismissed<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.AccessKeyDisplayDismissed += (o, arg) => action(self);
            return self;
        }
        
        public static T OnAccessKeyDisplayRequested<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.AccessKeyDisplayRequestedEventArgs> handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.AccessKeyDisplayRequested += handler;
            return self;
        }
        
        public static T OnAccessKeyDisplayRequested<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.AccessKeyDisplayRequested += (o, arg) => action(self);
            return self;
        }
        
        public static T OnAccessKeyInvoked<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.AccessKeyInvokedEventArgs> handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.AccessKeyInvoked += handler;
            return self;
        }
        
        public static T OnAccessKeyInvoked<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.AccessKeyInvoked += (o, arg) => action(self);
            return self;
        }
        
        public static T OnBringIntoViewRequested<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.BringIntoViewRequestedEventArgs> handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.BringIntoViewRequested += handler;
            return self;
        }
        
        public static T OnBringIntoViewRequested<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.BringIntoViewRequested += (o, arg) => action(self);
            return self;
        }
        
        public static T OnCharacterReceived<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.CharacterReceivedRoutedEventArgs> handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.CharacterReceived += handler;
            return self;
        }
        
        public static T OnCharacterReceived<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.CharacterReceived += (o, arg) => action(self);
            return self;
        }
        
        public static T OnContextCanceled<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.RoutedEventArgs> handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.ContextCanceled += handler;
            return self;
        }
        
        public static T OnContextCanceled<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.ContextCanceled += (o, arg) => action(self);
            return self;
        }
        
        public static T OnContextRequested<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.ContextRequestedEventArgs> handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.ContextRequested += handler;
            return self;
        }
        
        public static T OnContextRequested<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.ContextRequested += (o, arg) => action(self);
            return self;
        }
        
        public static T OnDoubleTapped<T>(this T self, Microsoft.UI.Xaml.Input.DoubleTappedEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.DoubleTapped += handler;
            return self;
        }
        
        public static T OnDoubleTapped<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.DoubleTapped += (o, arg) => action(self);
            return self;
        }
        
        public static T OnDragEnter<T>(this T self, Microsoft.UI.Xaml.DragEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.DragEnter += handler;
            return self;
        }
        
        public static T OnDragEnter<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.DragEnter += (o, arg) => action(self);
            return self;
        }
        
        public static T OnDragLeave<T>(this T self, Microsoft.UI.Xaml.DragEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.DragLeave += handler;
            return self;
        }
        
        public static T OnDragLeave<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.DragLeave += (o, arg) => action(self);
            return self;
        }
        
        public static T OnDragOver<T>(this T self, Microsoft.UI.Xaml.DragEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.DragOver += handler;
            return self;
        }
        
        public static T OnDragOver<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.DragOver += (o, arg) => action(self);
            return self;
        }
        
        public static T OnDragStarting<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.DragStartingEventArgs> handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.DragStarting += handler;
            return self;
        }
        
        public static T OnDragStarting<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.DragStarting += (o, arg) => action(self);
            return self;
        }
        
        public static T OnDrop<T>(this T self, Microsoft.UI.Xaml.DragEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.Drop += handler;
            return self;
        }
        
        public static T OnDrop<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.Drop += (o, arg) => action(self);
            return self;
        }
        
        public static T OnDropCompleted<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.DropCompletedEventArgs> handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.DropCompleted += handler;
            return self;
        }
        
        public static T OnDropCompleted<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.DropCompleted += (o, arg) => action(self);
            return self;
        }
        
        public static T OnGettingFocus<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.GettingFocusEventArgs> handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.GettingFocus += handler;
            return self;
        }
        
        public static T OnGettingFocus<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.GettingFocus += (o, arg) => action(self);
            return self;
        }
        
        public static T OnGotFocus<T>(this T self, Microsoft.UI.Xaml.RoutedEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.GotFocus += handler;
            return self;
        }
        
        public static T OnGotFocus<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.GotFocus += (o, arg) => action(self);
            return self;
        }
        
        public static T OnHolding<T>(this T self, Microsoft.UI.Xaml.Input.HoldingEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.Holding += handler;
            return self;
        }
        
        public static T OnHolding<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.Holding += (o, arg) => action(self);
            return self;
        }
        
        public static T OnKeyDown<T>(this T self, Microsoft.UI.Xaml.Input.KeyEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.KeyDown += handler;
            return self;
        }
        
        public static T OnKeyDown<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.KeyDown += (o, arg) => action(self);
            return self;
        }
        
        public static T OnKeyUp<T>(this T self, Microsoft.UI.Xaml.Input.KeyEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.KeyUp += handler;
            return self;
        }
        
        public static T OnKeyUp<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.KeyUp += (o, arg) => action(self);
            return self;
        }
        
        public static T OnLosingFocus<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.LosingFocusEventArgs> handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.LosingFocus += handler;
            return self;
        }
        
        public static T OnLosingFocus<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.LosingFocus += (o, arg) => action(self);
            return self;
        }
        
        public static T OnLostFocus<T>(this T self, Microsoft.UI.Xaml.RoutedEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.LostFocus += handler;
            return self;
        }
        
        public static T OnLostFocus<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.LostFocus += (o, arg) => action(self);
            return self;
        }
        
        public static T OnManipulationCompleted<T>(this T self, Microsoft.UI.Xaml.Input.ManipulationCompletedEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.ManipulationCompleted += handler;
            return self;
        }
        
        public static T OnManipulationCompleted<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.ManipulationCompleted += (o, arg) => action(self);
            return self;
        }
        
        public static T OnManipulationDelta<T>(this T self, Microsoft.UI.Xaml.Input.ManipulationDeltaEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.ManipulationDelta += handler;
            return self;
        }
        
        public static T OnManipulationDelta<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.ManipulationDelta += (o, arg) => action(self);
            return self;
        }
        
        public static T OnManipulationInertiaStarting<T>(this T self, Microsoft.UI.Xaml.Input.ManipulationInertiaStartingEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.ManipulationInertiaStarting += handler;
            return self;
        }
        
        public static T OnManipulationInertiaStarting<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.ManipulationInertiaStarting += (o, arg) => action(self);
            return self;
        }
        
        public static T OnManipulationStarted<T>(this T self, Microsoft.UI.Xaml.Input.ManipulationStartedEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.ManipulationStarted += handler;
            return self;
        }
        
        public static T OnManipulationStarted<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.ManipulationStarted += (o, arg) => action(self);
            return self;
        }
        
        public static T OnManipulationStarting<T>(this T self, Microsoft.UI.Xaml.Input.ManipulationStartingEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.ManipulationStarting += handler;
            return self;
        }
        
        public static T OnManipulationStarting<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.ManipulationStarting += (o, arg) => action(self);
            return self;
        }
        
        public static T OnNoFocusCandidateFound<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.NoFocusCandidateFoundEventArgs> handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.NoFocusCandidateFound += handler;
            return self;
        }
        
        public static T OnNoFocusCandidateFound<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.NoFocusCandidateFound += (o, arg) => action(self);
            return self;
        }
        
        public static T OnPointerCanceled<T>(this T self, Microsoft.UI.Xaml.Input.PointerEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PointerCanceled += handler;
            return self;
        }
        
        public static T OnPointerCanceled<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PointerCanceled += (o, arg) => action(self);
            return self;
        }
        
        public static T OnPointerCaptureLost<T>(this T self, Microsoft.UI.Xaml.Input.PointerEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PointerCaptureLost += handler;
            return self;
        }
        
        public static T OnPointerCaptureLost<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PointerCaptureLost += (o, arg) => action(self);
            return self;
        }
        
        public static T OnPointerEntered<T>(this T self, Microsoft.UI.Xaml.Input.PointerEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PointerEntered += handler;
            return self;
        }
        
        public static T OnPointerEntered<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PointerEntered += (o, arg) => action(self);
            return self;
        }
        
        public static T OnPointerExited<T>(this T self, Microsoft.UI.Xaml.Input.PointerEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PointerExited += handler;
            return self;
        }
        
        public static T OnPointerExited<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PointerExited += (o, arg) => action(self);
            return self;
        }
        
        public static T OnPointerMoved<T>(this T self, Microsoft.UI.Xaml.Input.PointerEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PointerMoved += handler;
            return self;
        }
        
        public static T OnPointerMoved<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PointerMoved += (o, arg) => action(self);
            return self;
        }
        
        public static T OnPointerPressed<T>(this T self, Microsoft.UI.Xaml.Input.PointerEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PointerPressed += handler;
            return self;
        }
        
        public static T OnPointerPressed<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PointerPressed += (o, arg) => action(self);
            return self;
        }
        
        public static T OnPointerReleased<T>(this T self, Microsoft.UI.Xaml.Input.PointerEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PointerReleased += handler;
            return self;
        }
        
        public static T OnPointerReleased<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PointerReleased += (o, arg) => action(self);
            return self;
        }
        
        public static T OnPointerWheelChanged<T>(this T self, Microsoft.UI.Xaml.Input.PointerEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PointerWheelChanged += handler;
            return self;
        }
        
        public static T OnPointerWheelChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PointerWheelChanged += (o, arg) => action(self);
            return self;
        }
        
        public static T OnPreviewKeyDown<T>(this T self, Microsoft.UI.Xaml.Input.KeyEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PreviewKeyDown += handler;
            return self;
        }
        
        public static T OnPreviewKeyDown<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PreviewKeyDown += (o, arg) => action(self);
            return self;
        }
        
        public static T OnPreviewKeyUp<T>(this T self, Microsoft.UI.Xaml.Input.KeyEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PreviewKeyUp += handler;
            return self;
        }
        
        public static T OnPreviewKeyUp<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.PreviewKeyUp += (o, arg) => action(self);
            return self;
        }
        
        public static T OnProcessKeyboardAccelerators<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.UIElement, Microsoft.UI.Xaml.Input.ProcessKeyboardAcceleratorEventArgs> handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.ProcessKeyboardAccelerators += handler;
            return self;
        }
        
        public static T OnProcessKeyboardAccelerators<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.ProcessKeyboardAccelerators += (o, arg) => action(self);
            return self;
        }
        
        public static T OnRightTapped<T>(this T self, Microsoft.UI.Xaml.Input.RightTappedEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.RightTapped += handler;
            return self;
        }
        
        public static T OnRightTapped<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.RightTapped += (o, arg) => action(self);
            return self;
        }
        
        public static T OnTapped<T>(this T self, Microsoft.UI.Xaml.Input.TappedEventHandler handler)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.Tapped += handler;
            return self;
        }
        
        public static T OnTapped<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.UIElement
        {
            self.Tapped += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
