//
// <auto-generated> CodeOnly.WinUI.Core.Generator.Extensions
//

#nullable enable
#pragma warning disable CS8601

using System;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using System.Collections.Generic;


namespace CodeOnly.WinUI.Core
{
    using CodeOnly.WinUI.Core.Internal;
    
    public static partial class GridExtension
    {
        public static T BackgroundSizing<T>(this T self,
            Microsoft.UI.Xaml.Controls.BackgroundSizing backgroundSizing)
            where T : Microsoft.UI.Xaml.Controls.Grid
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Grid.BackgroundSizingProperty, backgroundSizing);
            return self;
        }
        
        public static T BackgroundSizing<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Controls.BackgroundSizing>, IPropertyBuilder<Microsoft.UI.Xaml.Controls.BackgroundSizing>> configure)
            where T : Microsoft.UI.Xaml.Controls.Grid
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Controls.BackgroundSizing>(self, Microsoft.UI.Xaml.Controls.Grid.BackgroundSizingProperty);
            configure(context).Build();
            return self;
        }
        
        public static T BorderBrush<T>(this T self,
            Microsoft.UI.Xaml.Media.Brush borderBrush)
            where T : Microsoft.UI.Xaml.Controls.Grid
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Grid.BorderBrushProperty, borderBrush);
            return self;
        }
        
        public static T BorderBrush<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.Brush>, IPropertyBuilder<Microsoft.UI.Xaml.Media.Brush>> configure)
            where T : Microsoft.UI.Xaml.Controls.Grid
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.Brush>(self, Microsoft.UI.Xaml.Controls.Grid.BorderBrushProperty);
            configure(context).Build();
            return self;
        }
        
        public static T BorderThickness<T>(this T self,
            Microsoft.UI.Xaml.Thickness borderThickness)
            where T : Microsoft.UI.Xaml.Controls.Grid
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Grid.BorderThicknessProperty, borderThickness);
            return self;
        }
        
        public static T BorderThickness<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Thickness>, IPropertyBuilder<Microsoft.UI.Xaml.Thickness>> configure)
            where T : Microsoft.UI.Xaml.Controls.Grid
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Thickness>(self, Microsoft.UI.Xaml.Controls.Grid.BorderThicknessProperty);
            configure(context).Build();
            return self;
        }
        
        public static T ColumnDefinitions<T>(this T self,
            IList<Microsoft.UI.Xaml.Controls.ColumnDefinition> columnDefinitions)
            where T : Microsoft.UI.Xaml.Controls.Grid
        {
            foreach (var item in columnDefinitions)
                self.ColumnDefinitions.Add(item);
            return self;
        }

        public static T ColumnDefinitions<T>(this T self,
            params Microsoft.UI.Xaml.Controls.ColumnDefinition[] columnDefinitions)
            where T : Microsoft.UI.Xaml.Controls.Grid
        {
            foreach (var item in columnDefinitions)
                self.ColumnDefinitions.Add(item);
            return self;
        }
        
        public static T ColumnSpacing<T>(this T self,
            double columnSpacing)
            where T : Microsoft.UI.Xaml.Controls.Grid
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Grid.ColumnSpacingProperty, columnSpacing);
            return self;
        }
        
        public static T ColumnSpacing<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.UI.Xaml.Controls.Grid
        {
            var context = new PropertyContext<double>(self, Microsoft.UI.Xaml.Controls.Grid.ColumnSpacingProperty);
            configure(context).Build();
            return self;
        }
        
        public static T CornerRadius<T>(this T self,
            Microsoft.UI.Xaml.CornerRadius cornerRadius)
            where T : Microsoft.UI.Xaml.Controls.Grid
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Grid.CornerRadiusProperty, cornerRadius);
            return self;
        }
        
        public static T CornerRadius<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.CornerRadius>, IPropertyBuilder<Microsoft.UI.Xaml.CornerRadius>> configure)
            where T : Microsoft.UI.Xaml.Controls.Grid
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.CornerRadius>(self, Microsoft.UI.Xaml.Controls.Grid.CornerRadiusProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Padding<T>(this T self,
            Microsoft.UI.Xaml.Thickness padding)
            where T : Microsoft.UI.Xaml.Controls.Grid
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Grid.PaddingProperty, padding);
            return self;
        }
        
        public static T Padding<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Thickness>, IPropertyBuilder<Microsoft.UI.Xaml.Thickness>> configure)
            where T : Microsoft.UI.Xaml.Controls.Grid
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Thickness>(self, Microsoft.UI.Xaml.Controls.Grid.PaddingProperty);
            configure(context).Build();
            return self;
        }
        
        public static T RowDefinitions<T>(this T self,
            IList<Microsoft.UI.Xaml.Controls.RowDefinition> rowDefinitions)
            where T : Microsoft.UI.Xaml.Controls.Grid
        {
            foreach (var item in rowDefinitions)
                self.RowDefinitions.Add(item);
            return self;
        }

        public static T RowDefinitions<T>(this T self,
            params Microsoft.UI.Xaml.Controls.RowDefinition[] rowDefinitions)
            where T : Microsoft.UI.Xaml.Controls.Grid
        {
            foreach (var item in rowDefinitions)
                self.RowDefinitions.Add(item);
            return self;
        }
        
        public static T RowSpacing<T>(this T self,
            double rowSpacing)
            where T : Microsoft.UI.Xaml.Controls.Grid
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Grid.RowSpacingProperty, rowSpacing);
            return self;
        }
        
        public static T RowSpacing<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.UI.Xaml.Controls.Grid
        {
            var context = new PropertyContext<double>(self, Microsoft.UI.Xaml.Controls.Grid.RowSpacingProperty);
            configure(context).Build();
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
