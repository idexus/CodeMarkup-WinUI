//
// <auto-generated> CodeOnly.WinUI.Core.Generator.Extensions
//

#nullable enable
#pragma warning disable CS8601

using System;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using System.Collections.Generic;


namespace CodeOnly.WinUI.Core
{
    using CodeOnly.WinUI.Core.Internal;
    
    public static partial class FrameworkElementExtension
    {
        public static T AllowFocusOnInteraction<T>(this T self,
            bool allowFocusOnInteraction)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.AllowFocusOnInteractionProperty, allowFocusOnInteraction);
            return self;
        }
        
        public static T AllowFocusOnInteraction<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.FrameworkElement.AllowFocusOnInteractionProperty);
            configure(context).Build();
            return self;
        }
        
        public static T AllowFocusWhenDisabled<T>(this T self,
            bool allowFocusWhenDisabled)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.AllowFocusWhenDisabledProperty, allowFocusWhenDisabled);
            return self;
        }
        
        public static T AllowFocusWhenDisabled<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.FrameworkElement.AllowFocusWhenDisabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static T DataContext<T>(this T self,
            object dataContext)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.DataContextProperty, dataContext);
            return self;
        }
        
        public static T DataContext<T>(this T self, Func<PropertyContext<object>, IPropertyBuilder<object>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<object>(self, Microsoft.UI.Xaml.FrameworkElement.DataContextProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FlowDirection<T>(this T self,
            Microsoft.UI.Xaml.FlowDirection flowDirection)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.FlowDirectionProperty, flowDirection);
            return self;
        }
        
        public static T FlowDirection<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.FlowDirection>, IPropertyBuilder<Microsoft.UI.Xaml.FlowDirection>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.FlowDirection>(self, Microsoft.UI.Xaml.FrameworkElement.FlowDirectionProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FocusVisualMargin<T>(this T self,
            Microsoft.UI.Xaml.Thickness focusVisualMargin)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.FocusVisualMarginProperty, focusVisualMargin);
            return self;
        }
        
        public static T FocusVisualMargin<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Thickness>, IPropertyBuilder<Microsoft.UI.Xaml.Thickness>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Thickness>(self, Microsoft.UI.Xaml.FrameworkElement.FocusVisualMarginProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FocusVisualPrimaryBrush<T>(this T self,
            Microsoft.UI.Xaml.Media.Brush focusVisualPrimaryBrush)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.FocusVisualPrimaryBrushProperty, focusVisualPrimaryBrush);
            return self;
        }
        
        public static T FocusVisualPrimaryBrush<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.Brush>, IPropertyBuilder<Microsoft.UI.Xaml.Media.Brush>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.Brush>(self, Microsoft.UI.Xaml.FrameworkElement.FocusVisualPrimaryBrushProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FocusVisualPrimaryThickness<T>(this T self,
            Microsoft.UI.Xaml.Thickness focusVisualPrimaryThickness)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.FocusVisualPrimaryThicknessProperty, focusVisualPrimaryThickness);
            return self;
        }
        
        public static T FocusVisualPrimaryThickness<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Thickness>, IPropertyBuilder<Microsoft.UI.Xaml.Thickness>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Thickness>(self, Microsoft.UI.Xaml.FrameworkElement.FocusVisualPrimaryThicknessProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FocusVisualSecondaryBrush<T>(this T self,
            Microsoft.UI.Xaml.Media.Brush focusVisualSecondaryBrush)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.FocusVisualSecondaryBrushProperty, focusVisualSecondaryBrush);
            return self;
        }
        
        public static T FocusVisualSecondaryBrush<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.Brush>, IPropertyBuilder<Microsoft.UI.Xaml.Media.Brush>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.Brush>(self, Microsoft.UI.Xaml.FrameworkElement.FocusVisualSecondaryBrushProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FocusVisualSecondaryThickness<T>(this T self,
            Microsoft.UI.Xaml.Thickness focusVisualSecondaryThickness)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.FocusVisualSecondaryThicknessProperty, focusVisualSecondaryThickness);
            return self;
        }
        
        public static T FocusVisualSecondaryThickness<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Thickness>, IPropertyBuilder<Microsoft.UI.Xaml.Thickness>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Thickness>(self, Microsoft.UI.Xaml.FrameworkElement.FocusVisualSecondaryThicknessProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Height<T>(this T self,
            double height)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.HeightProperty, height);
            return self;
        }
        
        public static T Height<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<double>(self, Microsoft.UI.Xaml.FrameworkElement.HeightProperty);
            configure(context).Build();
            return self;
        }
        
        public static T HorizontalAlignment<T>(this T self,
            Microsoft.UI.Xaml.HorizontalAlignment horizontalAlignment)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.HorizontalAlignmentProperty, horizontalAlignment);
            return self;
        }
        
        public static T HorizontalAlignment<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.HorizontalAlignment>, IPropertyBuilder<Microsoft.UI.Xaml.HorizontalAlignment>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.HorizontalAlignment>(self, Microsoft.UI.Xaml.FrameworkElement.HorizontalAlignmentProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Language<T>(this T self,
            string language)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.LanguageProperty, language);
            return self;
        }
        
        public static T Language<T>(this T self, Func<PropertyContext<string>, IPropertyBuilder<string>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<string>(self, Microsoft.UI.Xaml.FrameworkElement.LanguageProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Margin<T>(this T self,
            Microsoft.UI.Xaml.Thickness margin)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.MarginProperty, margin);
            return self;
        }
        
        public static T Margin<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Thickness>, IPropertyBuilder<Microsoft.UI.Xaml.Thickness>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Thickness>(self, Microsoft.UI.Xaml.FrameworkElement.MarginProperty);
            configure(context).Build();
            return self;
        }
        
        public static T MaxHeight<T>(this T self,
            double maxHeight)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.MaxHeightProperty, maxHeight);
            return self;
        }
        
        public static T MaxHeight<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<double>(self, Microsoft.UI.Xaml.FrameworkElement.MaxHeightProperty);
            configure(context).Build();
            return self;
        }
        
        public static T MaxWidth<T>(this T self,
            double maxWidth)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.MaxWidthProperty, maxWidth);
            return self;
        }
        
        public static T MaxWidth<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<double>(self, Microsoft.UI.Xaml.FrameworkElement.MaxWidthProperty);
            configure(context).Build();
            return self;
        }
        
        public static T MinHeight<T>(this T self,
            double minHeight)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.MinHeightProperty, minHeight);
            return self;
        }
        
        public static T MinHeight<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<double>(self, Microsoft.UI.Xaml.FrameworkElement.MinHeightProperty);
            configure(context).Build();
            return self;
        }
        
        public static T MinWidth<T>(this T self,
            double minWidth)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.MinWidthProperty, minWidth);
            return self;
        }
        
        public static T MinWidth<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<double>(self, Microsoft.UI.Xaml.FrameworkElement.MinWidthProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Name<T>(this T self,
            string name)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.NameProperty, name);
            return self;
        }
        
        public static T Name<T>(this T self, Func<PropertyContext<string>, IPropertyBuilder<string>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<string>(self, Microsoft.UI.Xaml.FrameworkElement.NameProperty);
            configure(context).Build();
            return self;
        }
        
        public static T RequestedTheme<T>(this T self,
            Microsoft.UI.Xaml.ElementTheme requestedTheme)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.RequestedThemeProperty, requestedTheme);
            return self;
        }
        
        public static T RequestedTheme<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.ElementTheme>, IPropertyBuilder<Microsoft.UI.Xaml.ElementTheme>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.ElementTheme>(self, Microsoft.UI.Xaml.FrameworkElement.RequestedThemeProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Resources<T>(this T self,
            Microsoft.UI.Xaml.ResourceDictionary resources)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            if (FluentStyling.Setters != null) throw new ArgumentException("Fluent styling not available for property Resources");
            self.Resources = resources;
            return self;
        }
        
        public static T Style<T>(this T self,
            Microsoft.UI.Xaml.Style style)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.StyleProperty, style);
            return self;
        }
        
        public static T Style<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Style>, IPropertyBuilder<Microsoft.UI.Xaml.Style>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Style>(self, Microsoft.UI.Xaml.FrameworkElement.StyleProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Tag<T>(this T self,
            object tag)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.TagProperty, tag);
            return self;
        }
        
        public static T Tag<T>(this T self, Func<PropertyContext<object>, IPropertyBuilder<object>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<object>(self, Microsoft.UI.Xaml.FrameworkElement.TagProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Triggers<T>(this T self,
            IList<Microsoft.UI.Xaml.TriggerBase> triggers)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            foreach (var item in triggers)
                self.Triggers.Add(item);
            return self;
        }

        public static T Triggers<T>(this T self,
            params Microsoft.UI.Xaml.TriggerBase[] triggers)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            foreach (var item in triggers)
                self.Triggers.Add(item);
            return self;
        }
        
        public static T VerticalAlignment<T>(this T self,
            Microsoft.UI.Xaml.VerticalAlignment verticalAlignment)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.VerticalAlignmentProperty, verticalAlignment);
            return self;
        }
        
        public static T VerticalAlignment<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.VerticalAlignment>, IPropertyBuilder<Microsoft.UI.Xaml.VerticalAlignment>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.VerticalAlignment>(self, Microsoft.UI.Xaml.FrameworkElement.VerticalAlignmentProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Width<T>(this T self,
            double width)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.FrameworkElement.WidthProperty, width);
            return self;
        }
        
        public static T Width<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            var context = new PropertyContext<double>(self, Microsoft.UI.Xaml.FrameworkElement.WidthProperty);
            configure(context).Build();
            return self;
        }
        
        public static T OnActualThemeChanged<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement, object> handler)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.ActualThemeChanged += handler;
            return self;
        }
        
        public static T OnActualThemeChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.ActualThemeChanged += (o, arg) => action(self);
            return self;
        }
        
        public static T OnDataContextChanged<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement, Microsoft.UI.Xaml.DataContextChangedEventArgs> handler)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.DataContextChanged += handler;
            return self;
        }
        
        public static T OnDataContextChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.DataContextChanged += (o, arg) => action(self);
            return self;
        }
        
        public static T OnEffectiveViewportChanged<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement, Microsoft.UI.Xaml.EffectiveViewportChangedEventArgs> handler)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.EffectiveViewportChanged += handler;
            return self;
        }
        
        public static T OnEffectiveViewportChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.EffectiveViewportChanged += (o, arg) => action(self);
            return self;
        }
        
        public static T OnLayoutUpdated<T>(this T self, System.EventHandler<object> handler)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.LayoutUpdated += handler;
            return self;
        }
        
        public static T OnLayoutUpdated<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.LayoutUpdated += (o, arg) => action(self);
            return self;
        }
        
        public static T OnLoaded<T>(this T self, Microsoft.UI.Xaml.RoutedEventHandler handler)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.Loaded += handler;
            return self;
        }
        
        public static T OnLoaded<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.Loaded += (o, arg) => action(self);
            return self;
        }
        
        public static T OnLoading<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.FrameworkElement, object> handler)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.Loading += handler;
            return self;
        }
        
        public static T OnLoading<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.Loading += (o, arg) => action(self);
            return self;
        }
        
        public static T OnSizeChanged<T>(this T self, Microsoft.UI.Xaml.SizeChangedEventHandler handler)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SizeChanged += handler;
            return self;
        }
        
        public static T OnSizeChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.SizeChanged += (o, arg) => action(self);
            return self;
        }
        
        public static T OnUnloaded<T>(this T self, Microsoft.UI.Xaml.RoutedEventHandler handler)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.Unloaded += handler;
            return self;
        }
        
        public static T OnUnloaded<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.FrameworkElement
        {
            self.Unloaded += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
