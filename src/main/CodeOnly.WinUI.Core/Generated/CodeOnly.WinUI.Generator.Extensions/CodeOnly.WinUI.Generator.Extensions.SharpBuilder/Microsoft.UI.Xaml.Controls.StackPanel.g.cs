//
// <auto-generated> CodeOnly.WinUI.Core.Generator.Extensions
//

#nullable enable
#pragma warning disable CS8601

using System;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using System.Collections.Generic;


namespace CodeOnly.WinUI.Core
{
    using CodeOnly.WinUI.Core.Internal;
    
    public static partial class StackPanelExtension
    {
        public static T AreScrollSnapPointsRegular<T>(this T self,
            bool areScrollSnapPointsRegular)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.StackPanel.AreScrollSnapPointsRegularProperty, areScrollSnapPointsRegular);
            return self;
        }
        
        public static T AreScrollSnapPointsRegular<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.Controls.StackPanel.AreScrollSnapPointsRegularProperty);
            configure(context).Build();
            return self;
        }
        
        public static T BackgroundSizing<T>(this T self,
            Microsoft.UI.Xaml.Controls.BackgroundSizing backgroundSizing)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.StackPanel.BackgroundSizingProperty, backgroundSizing);
            return self;
        }
        
        public static T BackgroundSizing<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Controls.BackgroundSizing>, IPropertyBuilder<Microsoft.UI.Xaml.Controls.BackgroundSizing>> configure)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Controls.BackgroundSizing>(self, Microsoft.UI.Xaml.Controls.StackPanel.BackgroundSizingProperty);
            configure(context).Build();
            return self;
        }
        
        public static T BorderBrush<T>(this T self,
            Microsoft.UI.Xaml.Media.Brush borderBrush)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.StackPanel.BorderBrushProperty, borderBrush);
            return self;
        }
        
        public static T BorderBrush<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.Brush>, IPropertyBuilder<Microsoft.UI.Xaml.Media.Brush>> configure)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.Brush>(self, Microsoft.UI.Xaml.Controls.StackPanel.BorderBrushProperty);
            configure(context).Build();
            return self;
        }
        
        public static T BorderThickness<T>(this T self,
            Microsoft.UI.Xaml.Thickness borderThickness)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.StackPanel.BorderThicknessProperty, borderThickness);
            return self;
        }
        
        public static T BorderThickness<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Thickness>, IPropertyBuilder<Microsoft.UI.Xaml.Thickness>> configure)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Thickness>(self, Microsoft.UI.Xaml.Controls.StackPanel.BorderThicknessProperty);
            configure(context).Build();
            return self;
        }
        
        public static T CornerRadius<T>(this T self,
            Microsoft.UI.Xaml.CornerRadius cornerRadius)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.StackPanel.CornerRadiusProperty, cornerRadius);
            return self;
        }
        
        public static T CornerRadius<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.CornerRadius>, IPropertyBuilder<Microsoft.UI.Xaml.CornerRadius>> configure)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.CornerRadius>(self, Microsoft.UI.Xaml.Controls.StackPanel.CornerRadiusProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Orientation<T>(this T self,
            Microsoft.UI.Xaml.Controls.Orientation orientation)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.StackPanel.OrientationProperty, orientation);
            return self;
        }
        
        public static T Orientation<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Controls.Orientation>, IPropertyBuilder<Microsoft.UI.Xaml.Controls.Orientation>> configure)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Controls.Orientation>(self, Microsoft.UI.Xaml.Controls.StackPanel.OrientationProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Padding<T>(this T self,
            Microsoft.UI.Xaml.Thickness padding)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.StackPanel.PaddingProperty, padding);
            return self;
        }
        
        public static T Padding<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Thickness>, IPropertyBuilder<Microsoft.UI.Xaml.Thickness>> configure)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Thickness>(self, Microsoft.UI.Xaml.Controls.StackPanel.PaddingProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Spacing<T>(this T self,
            double spacing)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.StackPanel.SpacingProperty, spacing);
            return self;
        }
        
        public static T Spacing<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            var context = new PropertyContext<double>(self, Microsoft.UI.Xaml.Controls.StackPanel.SpacingProperty);
            configure(context).Build();
            return self;
        }
        
        public static T OnHorizontalSnapPointsChanged<T>(this T self, System.EventHandler<object> handler)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            self.HorizontalSnapPointsChanged += handler;
            return self;
        }
        
        public static T OnHorizontalSnapPointsChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            self.HorizontalSnapPointsChanged += (o, arg) => action(self);
            return self;
        }
        
        public static T OnVerticalSnapPointsChanged<T>(this T self, System.EventHandler<object> handler)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            self.VerticalSnapPointsChanged += handler;
            return self;
        }
        
        public static T OnVerticalSnapPointsChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.Controls.StackPanel
        {
            self.VerticalSnapPointsChanged += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
