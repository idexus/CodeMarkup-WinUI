//
// <auto-generated> CodeOnly.WinUI.Core.Generator.Extensions
//

#nullable enable
#pragma warning disable CS8601

using System;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using System.Collections.Generic;


namespace CodeOnly.WinUI.Core
{
    using CodeOnly.WinUI.Core.Internal;
    
    public static partial class TextBoxExtension
    {
        public static T AcceptsReturn<T>(this T self,
            bool acceptsReturn)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.AcceptsReturnProperty, acceptsReturn);
            return self;
        }
        
        public static T AcceptsReturn<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.Controls.TextBox.AcceptsReturnProperty);
            configure(context).Build();
            return self;
        }
        
        public static T CharacterCasing<T>(this T self,
            Microsoft.UI.Xaml.Controls.CharacterCasing characterCasing)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.CharacterCasingProperty, characterCasing);
            return self;
        }
        
        public static T CharacterCasing<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Controls.CharacterCasing>, IPropertyBuilder<Microsoft.UI.Xaml.Controls.CharacterCasing>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Controls.CharacterCasing>(self, Microsoft.UI.Xaml.Controls.TextBox.CharacterCasingProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Description<T>(this T self,
            object description)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.DescriptionProperty, description);
            return self;
        }
        
        public static T Description<T>(this T self, Func<PropertyContext<object>, IPropertyBuilder<object>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<object>(self, Microsoft.UI.Xaml.Controls.TextBox.DescriptionProperty);
            configure(context).Build();
            return self;
        }
        
        public static T DesiredCandidateWindowAlignment<T>(this T self,
            Microsoft.UI.Xaml.Controls.CandidateWindowAlignment desiredCandidateWindowAlignment)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.DesiredCandidateWindowAlignmentProperty, desiredCandidateWindowAlignment);
            return self;
        }
        
        public static T DesiredCandidateWindowAlignment<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Controls.CandidateWindowAlignment>, IPropertyBuilder<Microsoft.UI.Xaml.Controls.CandidateWindowAlignment>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Controls.CandidateWindowAlignment>(self, Microsoft.UI.Xaml.Controls.TextBox.DesiredCandidateWindowAlignmentProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Header<T>(this T self,
            object header)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.HeaderProperty, header);
            return self;
        }
        
        public static T Header<T>(this T self, Func<PropertyContext<object>, IPropertyBuilder<object>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<object>(self, Microsoft.UI.Xaml.Controls.TextBox.HeaderProperty);
            configure(context).Build();
            return self;
        }
        
        public static T HeaderTemplate<T>(this T self,
            Microsoft.UI.Xaml.DataTemplate headerTemplate)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.HeaderTemplateProperty, headerTemplate);
            return self;
        }
        
        public static T HeaderTemplate<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.DataTemplate>, IPropertyBuilder<Microsoft.UI.Xaml.DataTemplate>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.DataTemplate>(self, Microsoft.UI.Xaml.Controls.TextBox.HeaderTemplateProperty);
            configure(context).Build();
            return self;
        }
        
        public static T HorizontalTextAlignment<T>(this T self,
            Microsoft.UI.Xaml.TextAlignment horizontalTextAlignment)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.HorizontalTextAlignmentProperty, horizontalTextAlignment);
            return self;
        }
        
        public static T HorizontalTextAlignment<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.TextAlignment>, IPropertyBuilder<Microsoft.UI.Xaml.TextAlignment>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.TextAlignment>(self, Microsoft.UI.Xaml.Controls.TextBox.HorizontalTextAlignmentProperty);
            configure(context).Build();
            return self;
        }
        
        public static T InputScope<T>(this T self,
            Microsoft.UI.Xaml.Input.InputScope inputScope)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.InputScopeProperty, inputScope);
            return self;
        }
        
        public static T InputScope<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Input.InputScope>, IPropertyBuilder<Microsoft.UI.Xaml.Input.InputScope>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Input.InputScope>(self, Microsoft.UI.Xaml.Controls.TextBox.InputScopeProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsColorFontEnabled<T>(this T self,
            bool isColorFontEnabled)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.IsColorFontEnabledProperty, isColorFontEnabled);
            return self;
        }
        
        public static T IsColorFontEnabled<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.Controls.TextBox.IsColorFontEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsReadOnly<T>(this T self,
            bool isReadOnly)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.IsReadOnlyProperty, isReadOnly);
            return self;
        }
        
        public static T IsReadOnly<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.Controls.TextBox.IsReadOnlyProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsSpellCheckEnabled<T>(this T self,
            bool isSpellCheckEnabled)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.IsSpellCheckEnabledProperty, isSpellCheckEnabled);
            return self;
        }
        
        public static T IsSpellCheckEnabled<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.Controls.TextBox.IsSpellCheckEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsTextPredictionEnabled<T>(this T self,
            bool isTextPredictionEnabled)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.IsTextPredictionEnabledProperty, isTextPredictionEnabled);
            return self;
        }
        
        public static T IsTextPredictionEnabled<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.Controls.TextBox.IsTextPredictionEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static T MaxLength<T>(this T self,
            int maxLength)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.MaxLengthProperty, maxLength);
            return self;
        }
        
        public static T MaxLength<T>(this T self, Func<PropertyContext<int>, IPropertyBuilder<int>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<int>(self, Microsoft.UI.Xaml.Controls.TextBox.MaxLengthProperty);
            configure(context).Build();
            return self;
        }
        
        public static T PlaceholderForeground<T>(this T self,
            Microsoft.UI.Xaml.Media.Brush placeholderForeground)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.PlaceholderForegroundProperty, placeholderForeground);
            return self;
        }
        
        public static T PlaceholderForeground<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.Brush>, IPropertyBuilder<Microsoft.UI.Xaml.Media.Brush>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.Brush>(self, Microsoft.UI.Xaml.Controls.TextBox.PlaceholderForegroundProperty);
            configure(context).Build();
            return self;
        }
        
        public static T PlaceholderText<T>(this T self,
            string placeholderText)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.PlaceholderTextProperty, placeholderText);
            return self;
        }
        
        public static T PlaceholderText<T>(this T self, Func<PropertyContext<string>, IPropertyBuilder<string>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<string>(self, Microsoft.UI.Xaml.Controls.TextBox.PlaceholderTextProperty);
            configure(context).Build();
            return self;
        }
        
        public static T PreventKeyboardDisplayOnProgrammaticFocus<T>(this T self,
            bool preventKeyboardDisplayOnProgrammaticFocus)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.PreventKeyboardDisplayOnProgrammaticFocusProperty, preventKeyboardDisplayOnProgrammaticFocus);
            return self;
        }
        
        public static T PreventKeyboardDisplayOnProgrammaticFocus<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.Controls.TextBox.PreventKeyboardDisplayOnProgrammaticFocusProperty);
            configure(context).Build();
            return self;
        }
        
        public static T SelectedText<T>(this T self,
            string selectedText)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            if (FluentStyling.Setters != null) throw new ArgumentException("Fluent styling not available for property SelectedText");
            self.SelectedText = selectedText;
            return self;
        }
        
        public static T SelectionFlyout<T>(this T self,
            Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase selectionFlyout)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.SelectionFlyoutProperty, selectionFlyout);
            return self;
        }
        
        public static T SelectionFlyout<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>, IPropertyBuilder<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>(self, Microsoft.UI.Xaml.Controls.TextBox.SelectionFlyoutProperty);
            configure(context).Build();
            return self;
        }
        
        public static T SelectionHighlightColor<T>(this T self,
            Microsoft.UI.Xaml.Media.SolidColorBrush selectionHighlightColor)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.SelectionHighlightColorProperty, selectionHighlightColor);
            return self;
        }
        
        public static T SelectionHighlightColor<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.SolidColorBrush>, IPropertyBuilder<Microsoft.UI.Xaml.Media.SolidColorBrush>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.SolidColorBrush>(self, Microsoft.UI.Xaml.Controls.TextBox.SelectionHighlightColorProperty);
            configure(context).Build();
            return self;
        }
        
        public static T SelectionHighlightColorWhenNotFocused<T>(this T self,
            Microsoft.UI.Xaml.Media.SolidColorBrush selectionHighlightColorWhenNotFocused)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.SelectionHighlightColorWhenNotFocusedProperty, selectionHighlightColorWhenNotFocused);
            return self;
        }
        
        public static T SelectionHighlightColorWhenNotFocused<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.SolidColorBrush>, IPropertyBuilder<Microsoft.UI.Xaml.Media.SolidColorBrush>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.SolidColorBrush>(self, Microsoft.UI.Xaml.Controls.TextBox.SelectionHighlightColorWhenNotFocusedProperty);
            configure(context).Build();
            return self;
        }
        
        public static T SelectionLength<T>(this T self,
            int selectionLength)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            if (FluentStyling.Setters != null) throw new ArgumentException("Fluent styling not available for property SelectionLength");
            self.SelectionLength = selectionLength;
            return self;
        }
        
        public static T SelectionStart<T>(this T self,
            int selectionStart)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            if (FluentStyling.Setters != null) throw new ArgumentException("Fluent styling not available for property SelectionStart");
            self.SelectionStart = selectionStart;
            return self;
        }
        
        public static T Text<T>(this T self,
            string text)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.TextProperty, text);
            return self;
        }
        
        public static T Text<T>(this T self, Func<PropertyContext<string>, IPropertyBuilder<string>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<string>(self, Microsoft.UI.Xaml.Controls.TextBox.TextProperty);
            configure(context).Build();
            return self;
        }
        
        public static T TextAlignment<T>(this T self,
            Microsoft.UI.Xaml.TextAlignment textAlignment)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.TextAlignmentProperty, textAlignment);
            return self;
        }
        
        public static T TextAlignment<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.TextAlignment>, IPropertyBuilder<Microsoft.UI.Xaml.TextAlignment>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.TextAlignment>(self, Microsoft.UI.Xaml.Controls.TextBox.TextAlignmentProperty);
            configure(context).Build();
            return self;
        }
        
        public static T TextReadingOrder<T>(this T self,
            Microsoft.UI.Xaml.TextReadingOrder textReadingOrder)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.TextReadingOrderProperty, textReadingOrder);
            return self;
        }
        
        public static T TextReadingOrder<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.TextReadingOrder>, IPropertyBuilder<Microsoft.UI.Xaml.TextReadingOrder>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.TextReadingOrder>(self, Microsoft.UI.Xaml.Controls.TextBox.TextReadingOrderProperty);
            configure(context).Build();
            return self;
        }
        
        public static T TextWrapping<T>(this T self,
            Microsoft.UI.Xaml.TextWrapping textWrapping)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBox.TextWrappingProperty, textWrapping);
            return self;
        }
        
        public static T TextWrapping<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.TextWrapping>, IPropertyBuilder<Microsoft.UI.Xaml.TextWrapping>> configure)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.TextWrapping>(self, Microsoft.UI.Xaml.Controls.TextBox.TextWrappingProperty);
            configure(context).Build();
            return self;
        }
        
        public static T OnBeforeTextChanging<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox, Microsoft.UI.Xaml.Controls.TextBoxBeforeTextChangingEventArgs> handler)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.BeforeTextChanging += handler;
            return self;
        }
        
        public static T OnBeforeTextChanging<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.BeforeTextChanging += (o, arg) => action(self);
            return self;
        }
        
        public static T OnCandidateWindowBoundsChanged<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox, Microsoft.UI.Xaml.Controls.CandidateWindowBoundsChangedEventArgs> handler)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.CandidateWindowBoundsChanged += handler;
            return self;
        }
        
        public static T OnCandidateWindowBoundsChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.CandidateWindowBoundsChanged += (o, arg) => action(self);
            return self;
        }
        
        public static T OnContextMenuOpening<T>(this T self, Microsoft.UI.Xaml.Controls.ContextMenuOpeningEventHandler handler)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.ContextMenuOpening += handler;
            return self;
        }
        
        public static T OnContextMenuOpening<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.ContextMenuOpening += (o, arg) => action(self);
            return self;
        }
        
        public static T OnCopyingToClipboard<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox, Microsoft.UI.Xaml.Controls.TextControlCopyingToClipboardEventArgs> handler)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.CopyingToClipboard += handler;
            return self;
        }
        
        public static T OnCopyingToClipboard<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.CopyingToClipboard += (o, arg) => action(self);
            return self;
        }
        
        public static T OnCuttingToClipboard<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox, Microsoft.UI.Xaml.Controls.TextControlCuttingToClipboardEventArgs> handler)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.CuttingToClipboard += handler;
            return self;
        }
        
        public static T OnCuttingToClipboard<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.CuttingToClipboard += (o, arg) => action(self);
            return self;
        }
        
        public static T OnPaste<T>(this T self, Microsoft.UI.Xaml.Controls.TextControlPasteEventHandler handler)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.Paste += handler;
            return self;
        }
        
        public static T OnPaste<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.Paste += (o, arg) => action(self);
            return self;
        }
        
        public static T OnSelectionChanged<T>(this T self, Microsoft.UI.Xaml.RoutedEventHandler handler)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SelectionChanged += handler;
            return self;
        }
        
        public static T OnSelectionChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SelectionChanged += (o, arg) => action(self);
            return self;
        }
        
        public static T OnSelectionChanging<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox, Microsoft.UI.Xaml.Controls.TextBoxSelectionChangingEventArgs> handler)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SelectionChanging += handler;
            return self;
        }
        
        public static T OnSelectionChanging<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.SelectionChanging += (o, arg) => action(self);
            return self;
        }
        
        public static T OnTextChanged<T>(this T self, Microsoft.UI.Xaml.Controls.TextChangedEventHandler handler)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.TextChanged += handler;
            return self;
        }
        
        public static T OnTextChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.TextChanged += (o, arg) => action(self);
            return self;
        }
        
        public static T OnTextChanging<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox, Microsoft.UI.Xaml.Controls.TextBoxTextChangingEventArgs> handler)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.TextChanging += handler;
            return self;
        }
        
        public static T OnTextChanging<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.TextChanging += (o, arg) => action(self);
            return self;
        }
        
        public static T OnTextCompositionChanged<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox, Microsoft.UI.Xaml.Controls.TextCompositionChangedEventArgs> handler)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.TextCompositionChanged += handler;
            return self;
        }
        
        public static T OnTextCompositionChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.TextCompositionChanged += (o, arg) => action(self);
            return self;
        }
        
        public static T OnTextCompositionEnded<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox, Microsoft.UI.Xaml.Controls.TextCompositionEndedEventArgs> handler)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.TextCompositionEnded += handler;
            return self;
        }
        
        public static T OnTextCompositionEnded<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.TextCompositionEnded += (o, arg) => action(self);
            return self;
        }
        
        public static T OnTextCompositionStarted<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBox, Microsoft.UI.Xaml.Controls.TextCompositionStartedEventArgs> handler)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.TextCompositionStarted += handler;
            return self;
        }
        
        public static T OnTextCompositionStarted<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.Controls.TextBox
        {
            self.TextCompositionStarted += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
