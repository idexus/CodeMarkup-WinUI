//
// <auto-generated> CodeOnly.WinUI.Core.Generator.Extensions
//

#nullable enable
#pragma warning disable CS8601

using System;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using System.Collections.Generic;


namespace CodeOnly.WinUI.Core
{
    using CodeOnly.WinUI.Core.Internal;
    
    public static partial class ControlExtension
    {
        public static T Background<T>(this T self,
            Microsoft.UI.Xaml.Media.Brush background)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.BackgroundProperty, background);
            return self;
        }
        
        public static T Background<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.Brush>, IPropertyBuilder<Microsoft.UI.Xaml.Media.Brush>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.Brush>(self, Microsoft.UI.Xaml.Controls.Control.BackgroundProperty);
            configure(context).Build();
            return self;
        }
        
        public static T BackgroundSizing<T>(this T self,
            Microsoft.UI.Xaml.Controls.BackgroundSizing backgroundSizing)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.BackgroundSizingProperty, backgroundSizing);
            return self;
        }
        
        public static T BackgroundSizing<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Controls.BackgroundSizing>, IPropertyBuilder<Microsoft.UI.Xaml.Controls.BackgroundSizing>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Controls.BackgroundSizing>(self, Microsoft.UI.Xaml.Controls.Control.BackgroundSizingProperty);
            configure(context).Build();
            return self;
        }
        
        public static T BorderBrush<T>(this T self,
            Microsoft.UI.Xaml.Media.Brush borderBrush)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.BorderBrushProperty, borderBrush);
            return self;
        }
        
        public static T BorderBrush<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.Brush>, IPropertyBuilder<Microsoft.UI.Xaml.Media.Brush>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.Brush>(self, Microsoft.UI.Xaml.Controls.Control.BorderBrushProperty);
            configure(context).Build();
            return self;
        }
        
        public static T BorderThickness<T>(this T self,
            Microsoft.UI.Xaml.Thickness borderThickness)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.BorderThicknessProperty, borderThickness);
            return self;
        }
        
        public static T BorderThickness<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Thickness>, IPropertyBuilder<Microsoft.UI.Xaml.Thickness>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Thickness>(self, Microsoft.UI.Xaml.Controls.Control.BorderThicknessProperty);
            configure(context).Build();
            return self;
        }
        
        public static T CharacterSpacing<T>(this T self,
            int characterSpacing)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.CharacterSpacingProperty, characterSpacing);
            return self;
        }
        
        public static T CharacterSpacing<T>(this T self, Func<PropertyContext<int>, IPropertyBuilder<int>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<int>(self, Microsoft.UI.Xaml.Controls.Control.CharacterSpacingProperty);
            configure(context).Build();
            return self;
        }
        
        public static T CornerRadius<T>(this T self,
            Microsoft.UI.Xaml.CornerRadius cornerRadius)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.CornerRadiusProperty, cornerRadius);
            return self;
        }
        
        public static T CornerRadius<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.CornerRadius>, IPropertyBuilder<Microsoft.UI.Xaml.CornerRadius>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.CornerRadius>(self, Microsoft.UI.Xaml.Controls.Control.CornerRadiusProperty);
            configure(context).Build();
            return self;
        }
        
        public static T DefaultStyleResourceUri<T>(this T self,
            System.Uri defaultStyleResourceUri)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.DefaultStyleResourceUriProperty, defaultStyleResourceUri);
            return self;
        }
        
        public static T DefaultStyleResourceUri<T>(this T self, Func<PropertyContext<System.Uri>, IPropertyBuilder<System.Uri>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<System.Uri>(self, Microsoft.UI.Xaml.Controls.Control.DefaultStyleResourceUriProperty);
            configure(context).Build();
            return self;
        }
        
        public static T ElementSoundMode<T>(this T self,
            Microsoft.UI.Xaml.ElementSoundMode elementSoundMode)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.ElementSoundModeProperty, elementSoundMode);
            return self;
        }
        
        public static T ElementSoundMode<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.ElementSoundMode>, IPropertyBuilder<Microsoft.UI.Xaml.ElementSoundMode>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.ElementSoundMode>(self, Microsoft.UI.Xaml.Controls.Control.ElementSoundModeProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FontFamily<T>(this T self,
            Microsoft.UI.Xaml.Media.FontFamily fontFamily)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.FontFamilyProperty, fontFamily);
            return self;
        }
        
        public static T FontFamily<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.FontFamily>, IPropertyBuilder<Microsoft.UI.Xaml.Media.FontFamily>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.FontFamily>(self, Microsoft.UI.Xaml.Controls.Control.FontFamilyProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FontSize<T>(this T self,
            double fontSize)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.FontSizeProperty, fontSize);
            return self;
        }
        
        public static T FontSize<T>(this T self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<double>(self, Microsoft.UI.Xaml.Controls.Control.FontSizeProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FontStretch<T>(this T self,
            Windows.UI.Text.FontStretch fontStretch)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.FontStretchProperty, fontStretch);
            return self;
        }
        
        public static T FontStretch<T>(this T self, Func<PropertyContext<Windows.UI.Text.FontStretch>, IPropertyBuilder<Windows.UI.Text.FontStretch>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<Windows.UI.Text.FontStretch>(self, Microsoft.UI.Xaml.Controls.Control.FontStretchProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FontStyle<T>(this T self,
            Windows.UI.Text.FontStyle fontStyle)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.FontStyleProperty, fontStyle);
            return self;
        }
        
        public static T FontStyle<T>(this T self, Func<PropertyContext<Windows.UI.Text.FontStyle>, IPropertyBuilder<Windows.UI.Text.FontStyle>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<Windows.UI.Text.FontStyle>(self, Microsoft.UI.Xaml.Controls.Control.FontStyleProperty);
            configure(context).Build();
            return self;
        }
        
        public static T FontWeight<T>(this T self,
            Windows.UI.Text.FontWeight fontWeight)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.FontWeightProperty, fontWeight);
            return self;
        }
        
        public static T FontWeight<T>(this T self, Func<PropertyContext<Windows.UI.Text.FontWeight>, IPropertyBuilder<Windows.UI.Text.FontWeight>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<Windows.UI.Text.FontWeight>(self, Microsoft.UI.Xaml.Controls.Control.FontWeightProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Foreground<T>(this T self,
            Microsoft.UI.Xaml.Media.Brush foreground)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.ForegroundProperty, foreground);
            return self;
        }
        
        public static T Foreground<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Media.Brush>, IPropertyBuilder<Microsoft.UI.Xaml.Media.Brush>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.Brush>(self, Microsoft.UI.Xaml.Controls.Control.ForegroundProperty);
            configure(context).Build();
            return self;
        }
        
        public static T HorizontalContentAlignment<T>(this T self,
            Microsoft.UI.Xaml.HorizontalAlignment horizontalContentAlignment)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.HorizontalContentAlignmentProperty, horizontalContentAlignment);
            return self;
        }
        
        public static T HorizontalContentAlignment<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.HorizontalAlignment>, IPropertyBuilder<Microsoft.UI.Xaml.HorizontalAlignment>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.HorizontalAlignment>(self, Microsoft.UI.Xaml.Controls.Control.HorizontalContentAlignmentProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsEnabled<T>(this T self,
            bool isEnabled)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.IsEnabledProperty, isEnabled);
            return self;
        }
        
        public static T IsEnabled<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.Controls.Control.IsEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsFocusEngaged<T>(this T self,
            bool isFocusEngaged)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.IsFocusEngagedProperty, isFocusEngaged);
            return self;
        }
        
        public static T IsFocusEngaged<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.Controls.Control.IsFocusEngagedProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsFocusEngagementEnabled<T>(this T self,
            bool isFocusEngagementEnabled)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.IsFocusEngagementEnabledProperty, isFocusEngagementEnabled);
            return self;
        }
        
        public static T IsFocusEngagementEnabled<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.Controls.Control.IsFocusEngagementEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static T IsTextScaleFactorEnabled<T>(this T self,
            bool isTextScaleFactorEnabled)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.IsTextScaleFactorEnabledProperty, isTextScaleFactorEnabled);
            return self;
        }
        
        public static T IsTextScaleFactorEnabled<T>(this T self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.Controls.Control.IsTextScaleFactorEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Padding<T>(this T self,
            Microsoft.UI.Xaml.Thickness padding)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.PaddingProperty, padding);
            return self;
        }
        
        public static T Padding<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Thickness>, IPropertyBuilder<Microsoft.UI.Xaml.Thickness>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Thickness>(self, Microsoft.UI.Xaml.Controls.Control.PaddingProperty);
            configure(context).Build();
            return self;
        }
        
        public static T RequiresPointer<T>(this T self,
            Microsoft.UI.Xaml.Controls.RequiresPointer requiresPointer)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.RequiresPointerProperty, requiresPointer);
            return self;
        }
        
        public static T RequiresPointer<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Controls.RequiresPointer>, IPropertyBuilder<Microsoft.UI.Xaml.Controls.RequiresPointer>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Controls.RequiresPointer>(self, Microsoft.UI.Xaml.Controls.Control.RequiresPointerProperty);
            configure(context).Build();
            return self;
        }
        
        public static T TabNavigation<T>(this T self,
            Microsoft.UI.Xaml.Input.KeyboardNavigationMode tabNavigation)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.TabNavigationProperty, tabNavigation);
            return self;
        }
        
        public static T TabNavigation<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Input.KeyboardNavigationMode>, IPropertyBuilder<Microsoft.UI.Xaml.Input.KeyboardNavigationMode>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Input.KeyboardNavigationMode>(self, Microsoft.UI.Xaml.Controls.Control.TabNavigationProperty);
            configure(context).Build();
            return self;
        }
        
        public static T Template<T>(this T self,
            Microsoft.UI.Xaml.Controls.ControlTemplate template)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.TemplateProperty, template);
            return self;
        }
        
        public static T Template<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.Controls.ControlTemplate>, IPropertyBuilder<Microsoft.UI.Xaml.Controls.ControlTemplate>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Controls.ControlTemplate>(self, Microsoft.UI.Xaml.Controls.Control.TemplateProperty);
            configure(context).Build();
            return self;
        }
        
        public static T VerticalContentAlignment<T>(this T self,
            Microsoft.UI.Xaml.VerticalAlignment verticalContentAlignment)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.Control.VerticalContentAlignmentProperty, verticalContentAlignment);
            return self;
        }
        
        public static T VerticalContentAlignment<T>(this T self, Func<PropertyContext<Microsoft.UI.Xaml.VerticalAlignment>, IPropertyBuilder<Microsoft.UI.Xaml.VerticalAlignment>> configure)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.VerticalAlignment>(self, Microsoft.UI.Xaml.Controls.Control.VerticalContentAlignmentProperty);
            configure(context).Build();
            return self;
        }
        
        public static T OnFocusDisengaged<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control, Microsoft.UI.Xaml.Controls.FocusDisengagedEventArgs> handler)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.FocusDisengaged += handler;
            return self;
        }
        
        public static T OnFocusDisengaged<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.FocusDisengaged += (o, arg) => action(self);
            return self;
        }
        
        public static T OnFocusEngaged<T>(this T self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.Control, Microsoft.UI.Xaml.Controls.FocusEngagedEventArgs> handler)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.FocusEngaged += handler;
            return self;
        }
        
        public static T OnFocusEngaged<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.FocusEngaged += (o, arg) => action(self);
            return self;
        }
        
        public static T OnIsEnabledChanged<T>(this T self, Microsoft.UI.Xaml.DependencyPropertyChangedEventHandler handler)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.IsEnabledChanged += handler;
            return self;
        }
        
        public static T OnIsEnabledChanged<T>(this T self, System.Action<T> action)
            where T : Microsoft.UI.Xaml.Controls.Control
        {
            self.IsEnabledChanged += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
