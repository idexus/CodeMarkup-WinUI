//
// <auto-generated> CodeOnly.WinUI.Core.Generator.Extensions
//

#nullable enable
#pragma warning disable CS8601

using System;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using System.Collections.Generic;


namespace CodeOnly.WinUI.Core
{
    using CodeOnly.WinUI.Core.Internal;
    
    public static partial class TextBlockExtension
    {
        public static Microsoft.UI.Xaml.Controls.TextBlock CharacterSpacing(this Microsoft.UI.Xaml.Controls.TextBlock self,
            int characterSpacing)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.CharacterSpacingProperty, characterSpacing);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock CharacterSpacing(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<int>, IPropertyBuilder<int>> configure)
        {
            var context = new PropertyContext<int>(self, Microsoft.UI.Xaml.Controls.TextBlock.CharacterSpacingProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock FontFamily(this Microsoft.UI.Xaml.Controls.TextBlock self,
            Microsoft.UI.Xaml.Media.FontFamily fontFamily)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.FontFamilyProperty, fontFamily);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock FontFamily(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<Microsoft.UI.Xaml.Media.FontFamily>, IPropertyBuilder<Microsoft.UI.Xaml.Media.FontFamily>> configure)
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.FontFamily>(self, Microsoft.UI.Xaml.Controls.TextBlock.FontFamilyProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock FontSize(this Microsoft.UI.Xaml.Controls.TextBlock self,
            double fontSize)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.FontSizeProperty, fontSize);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock FontSize(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
        {
            var context = new PropertyContext<double>(self, Microsoft.UI.Xaml.Controls.TextBlock.FontSizeProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock FontStretch(this Microsoft.UI.Xaml.Controls.TextBlock self,
            Windows.UI.Text.FontStretch fontStretch)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.FontStretchProperty, fontStretch);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock FontStretch(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<Windows.UI.Text.FontStretch>, IPropertyBuilder<Windows.UI.Text.FontStretch>> configure)
        {
            var context = new PropertyContext<Windows.UI.Text.FontStretch>(self, Microsoft.UI.Xaml.Controls.TextBlock.FontStretchProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock FontStyle(this Microsoft.UI.Xaml.Controls.TextBlock self,
            Windows.UI.Text.FontStyle fontStyle)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.FontStyleProperty, fontStyle);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock FontStyle(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<Windows.UI.Text.FontStyle>, IPropertyBuilder<Windows.UI.Text.FontStyle>> configure)
        {
            var context = new PropertyContext<Windows.UI.Text.FontStyle>(self, Microsoft.UI.Xaml.Controls.TextBlock.FontStyleProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock FontWeight(this Microsoft.UI.Xaml.Controls.TextBlock self,
            Windows.UI.Text.FontWeight fontWeight)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.FontWeightProperty, fontWeight);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock FontWeight(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<Windows.UI.Text.FontWeight>, IPropertyBuilder<Windows.UI.Text.FontWeight>> configure)
        {
            var context = new PropertyContext<Windows.UI.Text.FontWeight>(self, Microsoft.UI.Xaml.Controls.TextBlock.FontWeightProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock Foreground(this Microsoft.UI.Xaml.Controls.TextBlock self,
            Microsoft.UI.Xaml.Media.Brush foreground)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.ForegroundProperty, foreground);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock Foreground(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<Microsoft.UI.Xaml.Media.Brush>, IPropertyBuilder<Microsoft.UI.Xaml.Media.Brush>> configure)
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.Brush>(self, Microsoft.UI.Xaml.Controls.TextBlock.ForegroundProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock HorizontalTextAlignment(this Microsoft.UI.Xaml.Controls.TextBlock self,
            Microsoft.UI.Xaml.TextAlignment horizontalTextAlignment)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.HorizontalTextAlignmentProperty, horizontalTextAlignment);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock HorizontalTextAlignment(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<Microsoft.UI.Xaml.TextAlignment>, IPropertyBuilder<Microsoft.UI.Xaml.TextAlignment>> configure)
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.TextAlignment>(self, Microsoft.UI.Xaml.Controls.TextBlock.HorizontalTextAlignmentProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock Inlines(this Microsoft.UI.Xaml.Controls.TextBlock self,
            IList<Microsoft.UI.Xaml.Documents.Inline> inlines)
        {
            foreach (var item in inlines)
                self.Inlines.Add(item);
            return self;
        }

        public static Microsoft.UI.Xaml.Controls.TextBlock Inlines(this Microsoft.UI.Xaml.Controls.TextBlock self,
            params Microsoft.UI.Xaml.Documents.Inline[] inlines)
        {
            foreach (var item in inlines)
                self.Inlines.Add(item);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock IsColorFontEnabled(this Microsoft.UI.Xaml.Controls.TextBlock self,
            bool isColorFontEnabled)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.IsColorFontEnabledProperty, isColorFontEnabled);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock IsColorFontEnabled(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.Controls.TextBlock.IsColorFontEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock IsTextScaleFactorEnabled(this Microsoft.UI.Xaml.Controls.TextBlock self,
            bool isTextScaleFactorEnabled)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.IsTextScaleFactorEnabledProperty, isTextScaleFactorEnabled);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock IsTextScaleFactorEnabled(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.Controls.TextBlock.IsTextScaleFactorEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock IsTextSelectionEnabled(this Microsoft.UI.Xaml.Controls.TextBlock self,
            bool isTextSelectionEnabled)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.IsTextSelectionEnabledProperty, isTextSelectionEnabled);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock IsTextSelectionEnabled(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<bool>, IPropertyBuilder<bool>> configure)
        {
            var context = new PropertyContext<bool>(self, Microsoft.UI.Xaml.Controls.TextBlock.IsTextSelectionEnabledProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock LineHeight(this Microsoft.UI.Xaml.Controls.TextBlock self,
            double lineHeight)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.LineHeightProperty, lineHeight);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock LineHeight(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<double>, IPropertyBuilder<double>> configure)
        {
            var context = new PropertyContext<double>(self, Microsoft.UI.Xaml.Controls.TextBlock.LineHeightProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock LineStackingStrategy(this Microsoft.UI.Xaml.Controls.TextBlock self,
            Microsoft.UI.Xaml.LineStackingStrategy lineStackingStrategy)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.LineStackingStrategyProperty, lineStackingStrategy);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock LineStackingStrategy(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<Microsoft.UI.Xaml.LineStackingStrategy>, IPropertyBuilder<Microsoft.UI.Xaml.LineStackingStrategy>> configure)
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.LineStackingStrategy>(self, Microsoft.UI.Xaml.Controls.TextBlock.LineStackingStrategyProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock MaxLines(this Microsoft.UI.Xaml.Controls.TextBlock self,
            int maxLines)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.MaxLinesProperty, maxLines);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock MaxLines(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<int>, IPropertyBuilder<int>> configure)
        {
            var context = new PropertyContext<int>(self, Microsoft.UI.Xaml.Controls.TextBlock.MaxLinesProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock OpticalMarginAlignment(this Microsoft.UI.Xaml.Controls.TextBlock self,
            Microsoft.UI.Xaml.OpticalMarginAlignment opticalMarginAlignment)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.OpticalMarginAlignmentProperty, opticalMarginAlignment);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock OpticalMarginAlignment(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<Microsoft.UI.Xaml.OpticalMarginAlignment>, IPropertyBuilder<Microsoft.UI.Xaml.OpticalMarginAlignment>> configure)
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.OpticalMarginAlignment>(self, Microsoft.UI.Xaml.Controls.TextBlock.OpticalMarginAlignmentProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock Padding(this Microsoft.UI.Xaml.Controls.TextBlock self,
            Microsoft.UI.Xaml.Thickness padding)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.PaddingProperty, padding);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock Padding(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<Microsoft.UI.Xaml.Thickness>, IPropertyBuilder<Microsoft.UI.Xaml.Thickness>> configure)
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Thickness>(self, Microsoft.UI.Xaml.Controls.TextBlock.PaddingProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock SelectionFlyout(this Microsoft.UI.Xaml.Controls.TextBlock self,
            Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase selectionFlyout)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.SelectionFlyoutProperty, selectionFlyout);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock SelectionFlyout(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>, IPropertyBuilder<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>> configure)
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase>(self, Microsoft.UI.Xaml.Controls.TextBlock.SelectionFlyoutProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock SelectionHighlightColor(this Microsoft.UI.Xaml.Controls.TextBlock self,
            Microsoft.UI.Xaml.Media.SolidColorBrush selectionHighlightColor)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.SelectionHighlightColorProperty, selectionHighlightColor);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock SelectionHighlightColor(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<Microsoft.UI.Xaml.Media.SolidColorBrush>, IPropertyBuilder<Microsoft.UI.Xaml.Media.SolidColorBrush>> configure)
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.Media.SolidColorBrush>(self, Microsoft.UI.Xaml.Controls.TextBlock.SelectionHighlightColorProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock Text(this Microsoft.UI.Xaml.Controls.TextBlock self,
            string text)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.TextProperty, text);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock Text(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<string>, IPropertyBuilder<string>> configure)
        {
            var context = new PropertyContext<string>(self, Microsoft.UI.Xaml.Controls.TextBlock.TextProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock TextAlignment(this Microsoft.UI.Xaml.Controls.TextBlock self,
            Microsoft.UI.Xaml.TextAlignment textAlignment)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.TextAlignmentProperty, textAlignment);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock TextAlignment(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<Microsoft.UI.Xaml.TextAlignment>, IPropertyBuilder<Microsoft.UI.Xaml.TextAlignment>> configure)
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.TextAlignment>(self, Microsoft.UI.Xaml.Controls.TextBlock.TextAlignmentProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock TextDecorations(this Microsoft.UI.Xaml.Controls.TextBlock self,
            Windows.UI.Text.TextDecorations textDecorations)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.TextDecorationsProperty, textDecorations);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock TextDecorations(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<Windows.UI.Text.TextDecorations>, IPropertyBuilder<Windows.UI.Text.TextDecorations>> configure)
        {
            var context = new PropertyContext<Windows.UI.Text.TextDecorations>(self, Microsoft.UI.Xaml.Controls.TextBlock.TextDecorationsProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock TextHighlighters(this Microsoft.UI.Xaml.Controls.TextBlock self,
            IList<Microsoft.UI.Xaml.Documents.TextHighlighter> textHighlighters)
        {
            foreach (var item in textHighlighters)
                self.TextHighlighters.Add(item);
            return self;
        }

        public static Microsoft.UI.Xaml.Controls.TextBlock TextHighlighters(this Microsoft.UI.Xaml.Controls.TextBlock self,
            params Microsoft.UI.Xaml.Documents.TextHighlighter[] textHighlighters)
        {
            foreach (var item in textHighlighters)
                self.TextHighlighters.Add(item);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock TextLineBounds(this Microsoft.UI.Xaml.Controls.TextBlock self,
            Microsoft.UI.Xaml.TextLineBounds textLineBounds)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.TextLineBoundsProperty, textLineBounds);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock TextLineBounds(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<Microsoft.UI.Xaml.TextLineBounds>, IPropertyBuilder<Microsoft.UI.Xaml.TextLineBounds>> configure)
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.TextLineBounds>(self, Microsoft.UI.Xaml.Controls.TextBlock.TextLineBoundsProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock TextReadingOrder(this Microsoft.UI.Xaml.Controls.TextBlock self,
            Microsoft.UI.Xaml.TextReadingOrder textReadingOrder)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.TextReadingOrderProperty, textReadingOrder);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock TextReadingOrder(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<Microsoft.UI.Xaml.TextReadingOrder>, IPropertyBuilder<Microsoft.UI.Xaml.TextReadingOrder>> configure)
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.TextReadingOrder>(self, Microsoft.UI.Xaml.Controls.TextBlock.TextReadingOrderProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock TextTrimming(this Microsoft.UI.Xaml.Controls.TextBlock self,
            Microsoft.UI.Xaml.TextTrimming textTrimming)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.TextTrimmingProperty, textTrimming);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock TextTrimming(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<Microsoft.UI.Xaml.TextTrimming>, IPropertyBuilder<Microsoft.UI.Xaml.TextTrimming>> configure)
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.TextTrimming>(self, Microsoft.UI.Xaml.Controls.TextBlock.TextTrimmingProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock TextWrapping(this Microsoft.UI.Xaml.Controls.TextBlock self,
            Microsoft.UI.Xaml.TextWrapping textWrapping)
        {
            self.SetValueOrAddSetter(Microsoft.UI.Xaml.Controls.TextBlock.TextWrappingProperty, textWrapping);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock TextWrapping(this Microsoft.UI.Xaml.Controls.TextBlock self, Func<PropertyContext<Microsoft.UI.Xaml.TextWrapping>, IPropertyBuilder<Microsoft.UI.Xaml.TextWrapping>> configure)
        {
            var context = new PropertyContext<Microsoft.UI.Xaml.TextWrapping>(self, Microsoft.UI.Xaml.Controls.TextBlock.TextWrappingProperty);
            configure(context).Build();
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock OnContextMenuOpening(this Microsoft.UI.Xaml.Controls.TextBlock self, Microsoft.UI.Xaml.Controls.ContextMenuOpeningEventHandler handler)
        {
            self.ContextMenuOpening += handler;
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock OnContextMenuOpening(this Microsoft.UI.Xaml.Controls.TextBlock self, System.Action<Microsoft.UI.Xaml.Controls.TextBlock> action)
        {
            self.ContextMenuOpening += (o, arg) => action(self);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock OnIsTextTrimmedChanged(this Microsoft.UI.Xaml.Controls.TextBlock self, Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Controls.TextBlock, Microsoft.UI.Xaml.Controls.IsTextTrimmedChangedEventArgs> handler)
        {
            self.IsTextTrimmedChanged += handler;
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock OnIsTextTrimmedChanged(this Microsoft.UI.Xaml.Controls.TextBlock self, System.Action<Microsoft.UI.Xaml.Controls.TextBlock> action)
        {
            self.IsTextTrimmedChanged += (o, arg) => action(self);
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock OnSelectionChanged(this Microsoft.UI.Xaml.Controls.TextBlock self, Microsoft.UI.Xaml.RoutedEventHandler handler)
        {
            self.SelectionChanged += handler;
            return self;
        }
        
        public static Microsoft.UI.Xaml.Controls.TextBlock OnSelectionChanged(this Microsoft.UI.Xaml.Controls.TextBlock self, System.Action<Microsoft.UI.Xaml.Controls.TextBlock> action)
        {
            self.SelectionChanged += (o, arg) => action(self);
            return self;
        }
        
    }
}

#pragma warning restore CS8601
#nullable restore
