//
// MIT License
// Copyright Pawel Krzywdzinski
//

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using Microsoft.CodeAnalysis;

namespace CodeOnly.WinUI.Generator.Extensions
{
    public partial class ExtensionGenerator
    {
        const string WinUIPrefix = "Microsoft.UI.Xaml";
        const string LibPrefix = "CodeOnly.WinUI.Core";

        readonly GeneratorExecutionContext context;
        readonly INamedTypeSymbol mainSymbol;
        readonly AttributeData attachedInterfacesAttribute;
        readonly bool isBindableObject;
        readonly bool isVisualElement;

        StringBuilder builder;
        bool isExtensionMethodsGenerated;

        public ExtensionGenerator(GeneratorExecutionContext context, INamedTypeSymbol symbol)
        {
            this.context = context;
            this.attachedInterfacesAttribute = Shared.GetAttachedInterfacesAttributeData(symbol);
            this.mainSymbol = attachedInterfacesAttribute == null ? symbol : attachedInterfacesAttribute.ConstructorArguments[0].Value as INamedTypeSymbol;
            this.isBindableObject = Helpers.IsFrameworkElement(mainSymbol);
            this.isVisualElement = Helpers.IsVisualElement(mainSymbol);
        }

        public void Build()
        {
            isExtensionMethodsGenerated = false;
            builder = new StringBuilder();
            builder.AppendLine("//");
            builder.AppendLine($"// <auto-generated> {LibPrefix}.Generator.Extensions");
            builder.AppendLine("//");
            builder.AppendLine();

            builder.AppendLine("#nullable enable");
            builder.AppendLine("#pragma warning disable CS8601");
            builder.AppendLine();
            builder.AppendLine("using System;");
            builder.AppendLine("using Microsoft.UI.Xaml;");
            builder.AppendLine("using Microsoft.UI.Xaml.Controls;");
            builder.AppendLine("using System.Collections.Generic;");
            builder.AppendLine();

            GenerateExtensionNameSpace();

            builder.AppendLine();
            builder.AppendLine("#pragma warning restore CS8601");
            builder.AppendLine("#nullable restore");


            if (isExtensionMethodsGenerated)
            {
                var tail = 
                    (attachedInterfacesAttribute != null ? ".attached" : "") +
                    (mainSymbol.ContainingNamespace.ToDisplayString().StartsWith(WinUIPrefix) ? "" : ".extension");

                context.AddSource($"{mainSymbol.ContainingNamespace.ToDisplayString()}.{Helpers.GetNormalizedFileName(mainSymbol)}{tail}.g.cs", builder.ToString());
            }
        }

        public  string GetUsingString()
        {
            if (!mainSymbol.ContainingNamespace.ToDisplayString().StartsWith(WinUIPrefix))
                return $@"using {LibPrefix};
    ";
            return "";
        }

        void GenerateExtensionNameSpace()
        {
            var className = $"{Helpers.GetNormalizedClassName(mainSymbol)}Extension";

            builder.Append($@"
namespace {(mainSymbol.ContainingNamespace.ToDisplayString().StartsWith(WinUIPrefix) ? LibPrefix : mainSymbol.ContainingNamespace.ToDisplayString())}
{{
    using {LibPrefix}.Internal;
    {GetUsingString()}
    public static partial class {className}
    {{");
            
            if (attachedInterfacesAttribute != null)
                GenerateAttachedPropertiesExtension();
            else
                GenerateClassExtensionBody();

            builder.AppendLine($@"
    }}
}}");
        }

        List<string> bindablePropertyNames;

        void GenerateClassExtensionBody()
        {
            bindablePropertyNames = new List<string>();
            var bindableProperties = mainSymbol
                    .GetMembers()
                    .Where(e => e.IsStatic && e.Name.EndsWith("Property") && e.DeclaredAccessibility == Accessibility.Public).ToList();

            bindablePropertyNames.Clear();
            foreach (var prop in bindableProperties)
            {
                var name = prop.Name.Substring(0, prop.Name.Length - "Property".Length);
                bindablePropertyNames.Add(name);
            }

            var properties = mainSymbol
                .GetMembers()
                .Where(e => e.Kind == SymbolKind.Property && e.DeclaredAccessibility == Accessibility.Public && !e.IsStatic);

            var events = mainSymbol
                .GetMembers()
                .Where(e => e.Kind == SymbolKind.Event && e.DeclaredAccessibility == Accessibility.Public && !e.IsStatic);

            foreach (var prop in properties)
                GenerateExtensionMethod(prop as IPropertySymbol);

            foreach (var @event in events)
                GenerateEventMethod(@event);

            //if (Helpers.IsBaseImplementationOfInterface(mainSymbol, "ITextAlignment"))
            //    GenerateExtensionMethods_ITextAlignment(mainSymbol);

            GenerateBindablePropertyExtensionsFromInterface();
        }


        class PropertyInfo
        {
            public INamedTypeSymbol MainSymbol { get; set; }
            public IPropertySymbol PropertySymbol { get; set; }
            public List<string> BindableProperties { get; set; }
            public bool IsBindableObject { get; set; }
            public bool IsBindableProperty { get; set; }
            public string BindablePropertyName { get; set; }

            public string propertyName;
            public string accessedWith;
            public string propertyTypeName;
            public string camelCaseName;
            public string symbolTypeName;
            public string valueAssignmentString;
            public string dataTemplateAssignmentString;
            public string fluentStylingCheckString;

            public void Build()
            {
                symbolTypeName = $"{MainSymbol.ToDisplayString()}";

                propertyName = PropertySymbol.Name.Split(new[] { "." }, StringSplitOptions.None).Last();
                propertyName = propertyName.Equals("class", StringComparison.Ordinal) ? "@class" : propertyName;

                if (BindablePropertyName == null)
                {
                    if (BindableProperties != null) IsBindableProperty = BindableProperties.Contains(propertyName);
                    accessedWith = PropertySymbol.IsStatic ? $"{MainSymbol.ToDisplayString()}" : "self";
                    BindablePropertyName = $"{MainSymbol.ToDisplayString()}.{propertyName}Property";
                }
                else
                    IsBindableObject = true;
                
                propertyTypeName = PropertySymbol.Type.ToDisplayString();
                camelCaseName = Helpers.CamelCase(propertyName);

                valueAssignmentString = IsBindableProperty  ?
                    $@"self.SetValueOrAddSetter({BindablePropertyName}, {camelCaseName});" :
                    $"{accessedWith}.{propertyName} = {camelCaseName};";

                dataTemplateAssignmentString = IsBindableProperty ?
                    $@"self.SetValueOrAddSetter({BindablePropertyName}, new DataTemplate(loadTemplate));" :
                    $@"{accessedWith}.{propertyName} = new DataTemplate(loadTemplate);";

                fluentStylingCheckString = IsBindableObject && !IsBindableProperty ?
            $@"if (FluentStyling.Setters != null) throw new ArgumentException(""Fluent styling not available for property {propertyName}"");
            " : "";

            }
        }

        bool ExistInBaseClasses(string propertyName, bool getterAndSetter)
        {
            var existInBaseClasses = false;
            Helpers.LoopDownToObject(mainSymbol.BaseType, type =>
            {
                existInBaseClasses = (type
                            .GetMembers()
                            .FirstOrDefault(e =>
                                e.Kind == SymbolKind.Property &&
                                e.DeclaredAccessibility == Accessibility.Public &&
                                (((IPropertySymbol)e).SetMethod != null || !getterAndSetter) &&
                                e.Name.Equals(propertyName, StringComparison.Ordinal)) != null);

                return existInBaseClasses;
            });
            return existInBaseClasses;
        }

        // --------------------------------------------------
        // ----- attached from interface fluent methods -----    
        // --------------------------------------------------

        void GenerateAttachedPropertiesExtension()
        {
            if (attachedInterfacesAttribute != null)
            {
                List<INamedTypeSymbol> interfaces = new List<INamedTypeSymbol>();

                if (attachedInterfacesAttribute != null)
                {
                    interfaces.AddRange(attachedInterfacesAttribute.ConstructorArguments[1].Values
                        .Select(e => (INamedTypeSymbol)e.Value)
                        .Where(e => e.GetAttributes().FirstOrDefault(e => e.AttributeClass.Name.Equals(Shared.AttachedPropertiesAttributeString)) != null)
                        .ToList());
                }

                interfaces.AddRange(
                    mainSymbol
                        .Interfaces
                        .Where(e => e.GetAttributes().FirstOrDefault(e => e.AttributeClass.Name.Equals(Shared.AttachedPropertiesAttributeString)) != null));

                foreach (var inter in interfaces)
                {
                    var attribute = inter.GetAttributes().FirstOrDefault(e => e.AttributeClass.Name.Equals(Shared.AttachedPropertiesAttributeString));
                    if (attribute != null)
                    {
                        var attachedType = attribute.ConstructorArguments[0].Value as INamedTypeSymbol;

                        if (!attachedType.ToDisplayString().Equals(mainSymbol.ToDisplayString()))
                        {
                            var properties = inter
                                .GetMembers()
                                .Where(e => e.Kind == SymbolKind.Property);

                            foreach (var prop in properties)
                            {
                                var propertySymbol = (IPropertySymbol)prop;
                                var attachedName = Shared.GetAttachedPropertyName(propertySymbol);
                                var fullPropertyName = $"{attachedType.ToDisplayString()}.{attachedName}";
                                GenerateExtensionMethodForBindableFromInterface(propertySymbol, fullPropertyName);
                            }
                        }
                    }
                }
            }
        }

        // --------------------------------------------------
        // ----- bindable from interface fluent methods -----    
        // --------------------------------------------------

        void GenerateBindablePropertyExtensionsFromInterface()
        {
            // generate using bindable interface
            var interfaces = mainSymbol
                .Interfaces
                .Where(e => e.GetAttributes().FirstOrDefault(e => e.AttributeClass.Name.Equals(Shared.BindablePropertiesAttributeString, StringComparison.Ordinal)) != null);

            foreach (var inter in interfaces)
            {
                var properties = inter
                    .GetMembers()
                    .Where(e => e.Kind == SymbolKind.Property);

                foreach (var prop in properties)
                {
                    var propertySymbol = (IPropertySymbol)prop;
                    var fullPropertyName = $"{mainSymbol.ToDisplayString()}.{prop.Name}";
                    GenerateExtensionMethodForBindableFromInterface(propertySymbol);
                }
            }
        }

        // ------------------------------------------
        // ----- bindable from interface (both) -----    
        // ------------------------------------------

        void GenerateExtensionMethodForBindableFromInterface(IPropertySymbol propertySymbol, string bindablePropertyName = null)
        {
            var info = new PropertyInfo
            {
                MainSymbol = mainSymbol,
                BindablePropertyName = bindablePropertyName,
                PropertySymbol = propertySymbol,
                IsBindableProperty = true,
                IsBindableObject = true
            };
            info.Build();

            if (!Shared.NotGenerateList.Contains(info.propertyName))
            {
                GenerateExtensionMethod_Value(info);
                GenerateExtensionMethod_BindablePropertyBuilder(info);

                //if (info.propertyTypeName.Contains("DataTemplate"))
                //    GenerateExtensionMethod_DataTemplate(info);

                if (attachedInterfacesAttribute != null)
                    GenerateExtensionMethod_GetValue(info);
            }
        }

        // -----------------------------------
        // ----- property fluent methods -----    
        // -----------------------------------

        void GenerateExtensionMethod(IPropertySymbol property)
        {
            var info = new PropertyInfo
            {
                MainSymbol = mainSymbol,
                PropertySymbol = property,
                BindableProperties = bindablePropertyNames,
                IsBindableObject = isBindableObject
            };
            info.Build();

            var propertyType = info.PropertySymbol.Type as INamedTypeSymbol;
            var isGenericIList = Helpers.IsGenericIList(propertyType, out var elementType);

            if (!Shared.NotGenerateList.Contains(info.propertyName))
            {
                if (!isGenericIList &&
                    info.PropertySymbol.SetMethod != null &&
                    info.PropertySymbol.SetMethod.DeclaredAccessibility == Accessibility.Public &&
                    !ExistInBaseClasses(info.propertyName, getterAndSetter: true))
                {
                    GenerateExtensionMethod_Value(info);

                    if (info.IsBindableProperty)
                        GenerateExtensionMethod_BindablePropertyBuilder(info);

                    //if (info.propertyTypeName.Equals("Microsoft.Maui.Controls.DataTemplate"))
                    //    GenerateExtensionMethod_DataTemplate(info);

                    //if (isVisualElement)
                    //{
                    //    if (info.propertyTypeName.Equals("double"))
                    //        GenerateExtensionMethod_AnimateTo(info, "DoubleTransform");

                    //    if (info.propertyTypeName.Equals("Microsoft.Maui.Graphics.Color"))
                    //        GenerateExtensionMethod_AnimateTo(info, "ColorTransform");
                    //}
                }
                else if (isGenericIList &&
                    info.PropertySymbol.GetMethod != null &&
                    info.PropertySymbol.GetMethod.DeclaredAccessibility == Accessibility.Public &&
                    !ExistInBaseClasses(info.propertyName, getterAndSetter: false))
                {
                    GenerateExtensionMethod_List(info, elementType.ToDisplayString());
                    if (info.IsBindableProperty)
                        GenerateExtensionMethod_BindablePropertyBuilder(info);
                }
            }
        }

        void GenerateExtensionMethod_Value(PropertyInfo info)
        {
            if (mainSymbol.IsSealed)
                GenerateExtensionMethod_Value_Sealed(info);
            else
                GenerateExtensionMethod_Value_Normal(info);
        }

        void GenerateExtensionMethod_Value_Sealed(PropertyInfo info)
        {
            isExtensionMethodsGenerated = true;
            builder.Append($@"
        public static {info.symbolTypeName} {info.propertyName}(this {info.symbolTypeName} self,
            {info.propertyTypeName} {info.camelCaseName})
        {{
            {info.fluentStylingCheckString}{info.valueAssignmentString}
            return self;
        }}
        ");
        }

        void GenerateExtensionMethod_Value_Normal(PropertyInfo info)
        {
            isExtensionMethodsGenerated = true;
            builder.Append($@"
        public static T {info.propertyName}<T>(this T self,
            {info.propertyTypeName} {info.camelCaseName})
            where T : {info.symbolTypeName}
        {{
            {info.fluentStylingCheckString}{info.valueAssignmentString}
            return self;
        }}
        ");
        }

        void GenerateExtensionMethod_GetValue(PropertyInfo info)
        {
            if (mainSymbol.IsSealed)
                GenerateExtensionMethod_GetValue_Sealed(info);
            else
                GenerateExtensionMethod_GetValue_Normal(info);
        }

        void GenerateExtensionMethod_GetValue_Sealed(PropertyInfo info)
        {
            isExtensionMethodsGenerated = true;
            builder.Append($@"
        public static {info.propertyTypeName} Get{info.propertyName}Value<T>(this {info.symbolTypeName} self)
        {{
            return ({info.propertyTypeName})self.GetValue({info.BindablePropertyName});
        }}
        ");
        }

        void GenerateExtensionMethod_GetValue_Normal(PropertyInfo info)
        {
            isExtensionMethodsGenerated = true;
            builder.Append($@"
        public static {info.propertyTypeName} Get{info.propertyName}Value<T>(this T self)
            where T : {info.symbolTypeName}
        {{
            return ({info.propertyTypeName})self.GetValue({info.BindablePropertyName});
        }}
        ");
        }

        // Animate To

        /*
        void GenerateExtensionMethod_AnimateTo(PropertyInfo info, string transformationName)
        {
            isExtensionMethodsGenerated = true;

            if (mainSymbol.IsSealed)
                builder.Append($@"
        public static Task<bool> Animate{info.propertyName}To(this {info.symbolTypeName} self, {info.propertyTypeName} value, uint length = 250, Easing? easing = null)");
            else
                builder.Append($@"
        public static Task<bool> Animate{info.propertyName}To<T>(this T self, {info.propertyTypeName} value, uint length = 250, Easing? easing = null)
            where T : {info.symbolTypeName}");


            builder.Append($@"
        {{
            {info.propertyTypeName} fromValue = self.{info.propertyName};
            var transform = (double t) => Transformations.{transformationName}(fromValue, value, t);
            var callback = ({info.propertyTypeName} actValue) => {{ self.{info.propertyName} = actValue; }};
            return Transformations.AnimateAsync<{info.propertyTypeName}>(self, ""Animate{info.propertyName}To"", transform, callback, length, easing);
        }}
        ");
        }
        */

        // binding builder

        void GenerateExtensionMethod_BindablePropertyBuilder(PropertyInfo info)
        {
            if (mainSymbol.IsSealed)
                GenerateExtensionMethod_BindablePropertyBuilder_Sealed(info);
            else
                GenerateExtensionMethod_BindablePropertyBuilder_Normal(info);
        }

        void GenerateExtensionMethod_BindablePropertyBuilder_Sealed(PropertyInfo info)
        {
            isExtensionMethodsGenerated = true;
            builder.Append($@"
        public static {info.symbolTypeName} {info.propertyName}(this {info.symbolTypeName} self, Func<PropertyContext<{info.propertyTypeName}>, IPropertyBuilder<{info.propertyTypeName}>> configure)
        {{
            var context = new PropertyContext<{info.propertyTypeName}>(self, {info.BindablePropertyName});
            configure(context).Build();
            return self;
        }}
        ");
        }

        void GenerateExtensionMethod_BindablePropertyBuilder_Normal(PropertyInfo info)
        {
            isExtensionMethodsGenerated = true;
            builder.Append($@"
        public static T {info.propertyName}<T>(this T self, Func<PropertyContext<{info.propertyTypeName}>, IPropertyBuilder<{info.propertyTypeName}>> configure)
            where T : {info.symbolTypeName}
        {{
            var context = new PropertyContext<{info.propertyTypeName}>(self, {info.BindablePropertyName});
            configure(context).Build();
            return self;
        }}
        ");
        }

        /*
        void GenerateExtensionMethod_DataTemplate(PropertyInfo info)
        {
            if (mainSymbol.IsSealed)
                GenerateExtensionMethod_DataTemplate_Sealed(info);
            else
                GenerateExtensionMethod_DataTemplate_Normal(info);
        }

        void GenerateExtensionMethod_DataTemplate_Sealed(PropertyInfo info)
        {
            isExtensionMethodsGenerated = true;
            builder.Append($@"
        public static {info.symbolTypeName} {info.propertyName}<T>(this {info.symbolTypeName} self, System.Func<object> loadTemplate)
        {{
            {info.dataTemplateAssignmentString}
            return self;
        }}
        ");
        }

        void GenerateExtensionMethod_DataTemplate_Normal(PropertyInfo info)
        {
            isExtensionMethodsGenerated = true;
            builder.Append($@"
        public static T {info.propertyName}<T>(this T self, System.Func<object> loadTemplate)
            where T : {info.symbolTypeName}
        {{
            {info.dataTemplateAssignmentString}
            return self;
        }}
        ");
        }
        */

        // -------------------------------
        // ----- list fluent methods -----    
        // -------------------------------

        void GenerateExtensionMethod_List(PropertyInfo info, string elementTypeName)
        {
            if (mainSymbol.IsSealed)
                GenerateExtensionMethod_List_Sealed(info, elementTypeName);
            else
                GenerateExtensionMethod_List_Normal(info, elementTypeName);
        }

        void GenerateExtensionMethod_List_Sealed(PropertyInfo info, string elementTypeName)
        {
            isExtensionMethodsGenerated = true;
            var tail = info.propertyTypeName.EndsWith("?") ? "?" : "";
            builder.Append($@"
        public static {info.symbolTypeName} {info.propertyName}(this {info.symbolTypeName} self,
            IList<{elementTypeName}> {info.camelCaseName})
        {{
            foreach (var item in {info.camelCaseName})
                {info.accessedWith}.{info.propertyName}{tail}.Add(item);
            return self;
        }}

        public static {info.symbolTypeName} {info.propertyName}(this {info.symbolTypeName} self,
            params {elementTypeName}[] {info.camelCaseName})
        {{
            foreach (var item in {info.camelCaseName})
                {info.accessedWith}.{info.propertyName}{tail}.Add(item);
            return self;
        }}
        ");
        }

        void GenerateExtensionMethod_List_Normal(PropertyInfo info, string elementTypeName)
        {
            isExtensionMethodsGenerated = true;
            var tail = info.propertyTypeName.EndsWith("?") ? "?" : "";
            builder.Append($@"
        public static T {info.propertyName}<T>(this T self,
            IList<{elementTypeName}> {info.camelCaseName})
            where T : {info.symbolTypeName}
        {{
            foreach (var item in {info.camelCaseName})
                {info.accessedWith}.{info.propertyName}{tail}.Add(item);
            return self;
        }}

        public static T {info.propertyName}<T>(this T self,
            params {elementTypeName}[] {info.camelCaseName})
            where T : {info.symbolTypeName}
        {{
            foreach (var item in {info.camelCaseName})
                {info.accessedWith}.{info.propertyName}{tail}.Add(item);
            return self;
        }}
        ");
        }

        // --------------------------------
        // ----- event fluent methods -----    
        // --------------------------------

        void GenerateEventMethod(ISymbol @event)
        {
            var eventSymbol = (IEventSymbol)@event;
            var eventHandler = eventSymbol.AddMethod.Parameters.First();
            var eventHandlerType = ((INamedTypeSymbol)eventHandler.Type);

            var existInBases = false;
            Helpers.LoopDownToObject(mainSymbol.BaseType, type =>
            {
                existInBases = (type
                    .GetMembers()
                    .FirstOrDefault(e =>
                        e.Kind == SymbolKind.Event &&
                        e.DeclaredAccessibility == Accessibility.Public &&
                        e.Name.Equals(eventSymbol.Name, StringComparison.Ordinal)) != null);

                return existInBases;
            });

            if (!existInBases && !Shared.NotGenerateList.Contains(eventSymbol.Name))
            {
                if (mainSymbol.IsSealed)
                {
                    GenerateEventMethodHandler_Sealed(eventSymbol, eventHandlerType);
                    GenerateEventMethodNoArgs_Sealed(eventSymbol);
                }
                else
                {
                    GenerateEventMethodHandler_Normal(eventSymbol, eventHandlerType);
                    GenerateEventMethodNoArgs_Normal(eventSymbol);
                }
            }
        }

        void GenerateEventMethodHandler_Sealed(IEventSymbol eventSymbol, INamedTypeSymbol namedType)
        {
            isExtensionMethodsGenerated = true;
            builder.Append($@"
        public static {mainSymbol.ToDisplayString()} On{eventSymbol.Name}(this {mainSymbol.ToDisplayString()} self, {namedType.ToDisplayString()} handler)
        {{
            self.{eventSymbol.Name} += handler;
            return self;
        }}
        ");
        }

        void GenerateEventMethodHandler_Normal(IEventSymbol eventSymbol, INamedTypeSymbol namedType)
        {
            isExtensionMethodsGenerated = true;
            builder.Append($@"
        public static T On{eventSymbol.Name}<T>(this T self, {namedType.ToDisplayString()} handler)
            where T : {mainSymbol.ToDisplayString()}
        {{
            self.{eventSymbol.Name} += handler;
            return self;
        }}
        ");
        }

        void GenerateEventMethodNoArgs_Sealed(IEventSymbol eventSymbol)
        {
            isExtensionMethodsGenerated = true;
            builder.Append($@"
        public static {mainSymbol.ToDisplayString()} On{eventSymbol.Name}(this {mainSymbol.ToDisplayString()} self, System.Action<{mainSymbol.ToDisplayString()}> action)
        {{
            self.{eventSymbol.Name} += (o, arg) => action(self);
            return self;
        }}
        ");
        }

        void GenerateEventMethodNoArgs_Normal(IEventSymbol eventSymbol)
        {
            isExtensionMethodsGenerated = true;
            builder.Append($@"
        public static T On{eventSymbol.Name}<T>(this T self, System.Action<T> action)
            where T : {mainSymbol.ToDisplayString()}
        {{
            self.{eventSymbol.Name} += (o, arg) => action(self);
            return self;
        }}
        ");
        }
    }
}

